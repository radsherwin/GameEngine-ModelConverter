// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meshData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_meshData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_meshData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "vboData.pb.h"
#include "textureData.pb.h"
#include "animData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_meshData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_meshData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class meshData_proto;
struct meshData_protoDefaultTypeInternal;
extern meshData_protoDefaultTypeInternal _meshData_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::meshData_proto* Arena::CreateMaybeMessage<::meshData_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum meshData_proto_RENDER_MODE : int {
  meshData_proto_RENDER_MODE_MODE_POINTS = 0,
  meshData_proto_RENDER_MODE_MODE_LINE = 1,
  meshData_proto_RENDER_MODE_MODE_LINE_LOOP = 2,
  meshData_proto_RENDER_MODE_MODE_LINE_STRIP = 3,
  meshData_proto_RENDER_MODE_MODE_TRIANGLES = 4,
  meshData_proto_RENDER_MODE_MODE_TRIANGLE_STRIP = 5,
  meshData_proto_RENDER_MODE_MODE_TRIANGLE_FAN = 6,
  meshData_proto_RENDER_MODE_meshData_proto_RENDER_MODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  meshData_proto_RENDER_MODE_meshData_proto_RENDER_MODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool meshData_proto_RENDER_MODE_IsValid(int value);
constexpr meshData_proto_RENDER_MODE meshData_proto_RENDER_MODE_RENDER_MODE_MIN = meshData_proto_RENDER_MODE_MODE_POINTS;
constexpr meshData_proto_RENDER_MODE meshData_proto_RENDER_MODE_RENDER_MODE_MAX = meshData_proto_RENDER_MODE_MODE_TRIANGLE_FAN;
constexpr int meshData_proto_RENDER_MODE_RENDER_MODE_ARRAYSIZE = meshData_proto_RENDER_MODE_RENDER_MODE_MAX + 1;

const std::string& meshData_proto_RENDER_MODE_Name(meshData_proto_RENDER_MODE value);
template<typename T>
inline const std::string& meshData_proto_RENDER_MODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, meshData_proto_RENDER_MODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function meshData_proto_RENDER_MODE_Name.");
  return meshData_proto_RENDER_MODE_Name(static_cast<meshData_proto_RENDER_MODE>(enum_t_value));
}
bool meshData_proto_RENDER_MODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, meshData_proto_RENDER_MODE* value);
// ===================================================================

class meshData_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:meshData_proto) */ {
 public:
  inline meshData_proto() : meshData_proto(nullptr) {}
  ~meshData_proto() override;
  explicit constexpr meshData_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  meshData_proto(const meshData_proto& from);
  meshData_proto(meshData_proto&& from) noexcept
    : meshData_proto() {
    *this = ::std::move(from);
  }

  inline meshData_proto& operator=(const meshData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline meshData_proto& operator=(meshData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const meshData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const meshData_proto* internal_default_instance() {
    return reinterpret_cast<const meshData_proto*>(
               &_meshData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(meshData_proto& a, meshData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(meshData_proto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(meshData_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline meshData_proto* New() const final {
    return new meshData_proto();
  }

  meshData_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<meshData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const meshData_proto& from);
  void MergeFrom(const meshData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(meshData_proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "meshData_proto";
  }
  protected:
  explicit meshData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef meshData_proto_RENDER_MODE RENDER_MODE;
  static constexpr RENDER_MODE MODE_POINTS =
    meshData_proto_RENDER_MODE_MODE_POINTS;
  static constexpr RENDER_MODE MODE_LINE =
    meshData_proto_RENDER_MODE_MODE_LINE;
  static constexpr RENDER_MODE MODE_LINE_LOOP =
    meshData_proto_RENDER_MODE_MODE_LINE_LOOP;
  static constexpr RENDER_MODE MODE_LINE_STRIP =
    meshData_proto_RENDER_MODE_MODE_LINE_STRIP;
  static constexpr RENDER_MODE MODE_TRIANGLES =
    meshData_proto_RENDER_MODE_MODE_TRIANGLES;
  static constexpr RENDER_MODE MODE_TRIANGLE_STRIP =
    meshData_proto_RENDER_MODE_MODE_TRIANGLE_STRIP;
  static constexpr RENDER_MODE MODE_TRIANGLE_FAN =
    meshData_proto_RENDER_MODE_MODE_TRIANGLE_FAN;
  static inline bool RENDER_MODE_IsValid(int value) {
    return meshData_proto_RENDER_MODE_IsValid(value);
  }
  static constexpr RENDER_MODE RENDER_MODE_MIN =
    meshData_proto_RENDER_MODE_RENDER_MODE_MIN;
  static constexpr RENDER_MODE RENDER_MODE_MAX =
    meshData_proto_RENDER_MODE_RENDER_MODE_MAX;
  static constexpr int RENDER_MODE_ARRAYSIZE =
    meshData_proto_RENDER_MODE_RENDER_MODE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& RENDER_MODE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RENDER_MODE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RENDER_MODE_Name.");
    return meshData_proto_RENDER_MODE_Name(enum_t_value);
  }
  static inline bool RENDER_MODE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RENDER_MODE* value) {
    return meshData_proto_RENDER_MODE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPNameFieldNumber = 2,
    kModeFieldNumber = 3,
    kNodeNumberFieldNumber = 4,
    kTriCountFieldNumber = 5,
    kVertCountFieldNumber = 6,
    kVboVertFieldNumber = 7,
    kVboNormFieldNumber = 8,
    kVboUvFieldNumber = 9,
    kVboIndexFieldNumber = 10,
    kVboColorFieldNumber = 11,
    kTextColorFieldNumber = 12,
    kAnimDataFieldNumber = 13,
    kMaterialIndexFieldNumber = 14,
    kPVersionFieldNumber = 1,
    kMeshCountFieldNumber = 15,
    kTexCountFieldNumber = 16,
    kNameCountFieldNumber = 17,
    kAnimCountFieldNumber = 18,
  };
  // repeated bytes pName = 2;
  int pname_size() const;
  private:
  int _internal_pname_size() const;
  public:
  void clear_pname();
  const std::string& pname(int index) const;
  std::string* mutable_pname(int index);
  void set_pname(int index, const std::string& value);
  void set_pname(int index, std::string&& value);
  void set_pname(int index, const char* value);
  void set_pname(int index, const void* value, size_t size);
  std::string* add_pname();
  void add_pname(const std::string& value);
  void add_pname(std::string&& value);
  void add_pname(const char* value);
  void add_pname(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pname();
  private:
  const std::string& _internal_pname(int index) const;
  std::string* _internal_add_pname();
  public:

  // repeated .meshData_proto.RENDER_MODE mode = 3;
  int mode_size() const;
  private:
  int _internal_mode_size() const;
  public:
  void clear_mode();
  private:
  ::meshData_proto_RENDER_MODE _internal_mode(int index) const;
  void _internal_add_mode(::meshData_proto_RENDER_MODE value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_mode();
  public:
  ::meshData_proto_RENDER_MODE mode(int index) const;
  void set_mode(int index, ::meshData_proto_RENDER_MODE value);
  void add_mode(::meshData_proto_RENDER_MODE value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& mode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_mode();

  // repeated uint32 nodeNumber = 4;
  int nodenumber_size() const;
  private:
  int _internal_nodenumber_size() const;
  public:
  void clear_nodenumber();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nodenumber(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_nodenumber() const;
  void _internal_add_nodenumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_nodenumber();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 nodenumber(int index) const;
  void set_nodenumber(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_nodenumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      nodenumber() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_nodenumber();

  // repeated uint32 triCount = 5;
  int tricount_size() const;
  private:
  int _internal_tricount_size() const;
  public:
  void clear_tricount();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tricount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_tricount() const;
  void _internal_add_tricount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_tricount();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 tricount(int index) const;
  void set_tricount(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tricount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tricount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tricount();

  // repeated uint32 vertCount = 6;
  int vertcount_size() const;
  private:
  int _internal_vertcount_size() const;
  public:
  void clear_vertcount();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vertcount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_vertcount() const;
  void _internal_add_vertcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_vertcount();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 vertcount(int index) const;
  void set_vertcount(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_vertcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      vertcount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_vertcount();

  // repeated .vboData_proto vbo_vert = 7;
  int vbo_vert_size() const;
  private:
  int _internal_vbo_vert_size() const;
  public:
  void clear_vbo_vert();
  ::vboData_proto* mutable_vbo_vert(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >*
      mutable_vbo_vert();
  private:
  const ::vboData_proto& _internal_vbo_vert(int index) const;
  ::vboData_proto* _internal_add_vbo_vert();
  public:
  const ::vboData_proto& vbo_vert(int index) const;
  ::vboData_proto* add_vbo_vert();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >&
      vbo_vert() const;

  // repeated .vboData_proto vbo_norm = 8;
  int vbo_norm_size() const;
  private:
  int _internal_vbo_norm_size() const;
  public:
  void clear_vbo_norm();
  ::vboData_proto* mutable_vbo_norm(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >*
      mutable_vbo_norm();
  private:
  const ::vboData_proto& _internal_vbo_norm(int index) const;
  ::vboData_proto* _internal_add_vbo_norm();
  public:
  const ::vboData_proto& vbo_norm(int index) const;
  ::vboData_proto* add_vbo_norm();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >&
      vbo_norm() const;

  // repeated .vboData_proto vbo_uv = 9;
  int vbo_uv_size() const;
  private:
  int _internal_vbo_uv_size() const;
  public:
  void clear_vbo_uv();
  ::vboData_proto* mutable_vbo_uv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >*
      mutable_vbo_uv();
  private:
  const ::vboData_proto& _internal_vbo_uv(int index) const;
  ::vboData_proto* _internal_add_vbo_uv();
  public:
  const ::vboData_proto& vbo_uv(int index) const;
  ::vboData_proto* add_vbo_uv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >&
      vbo_uv() const;

  // repeated .vboData_proto vbo_index = 10;
  int vbo_index_size() const;
  private:
  int _internal_vbo_index_size() const;
  public:
  void clear_vbo_index();
  ::vboData_proto* mutable_vbo_index(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >*
      mutable_vbo_index();
  private:
  const ::vboData_proto& _internal_vbo_index(int index) const;
  ::vboData_proto* _internal_add_vbo_index();
  public:
  const ::vboData_proto& vbo_index(int index) const;
  ::vboData_proto* add_vbo_index();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >&
      vbo_index() const;

  // repeated .vboData_proto vbo_color = 11;
  int vbo_color_size() const;
  private:
  int _internal_vbo_color_size() const;
  public:
  void clear_vbo_color();
  ::vboData_proto* mutable_vbo_color(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >*
      mutable_vbo_color();
  private:
  const ::vboData_proto& _internal_vbo_color(int index) const;
  ::vboData_proto* _internal_add_vbo_color();
  public:
  const ::vboData_proto& vbo_color(int index) const;
  ::vboData_proto* add_vbo_color();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >&
      vbo_color() const;

  // repeated .textureData_proto text_color = 12;
  int text_color_size() const;
  private:
  int _internal_text_color_size() const;
  public:
  void clear_text_color();
  ::textureData_proto* mutable_text_color(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textureData_proto >*
      mutable_text_color();
  private:
  const ::textureData_proto& _internal_text_color(int index) const;
  ::textureData_proto* _internal_add_text_color();
  public:
  const ::textureData_proto& text_color(int index) const;
  ::textureData_proto* add_text_color();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textureData_proto >&
      text_color() const;

  // repeated .animData_proto anim_data = 13;
  int anim_data_size() const;
  private:
  int _internal_anim_data_size() const;
  public:
  void clear_anim_data();
  ::animData_proto* mutable_anim_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::animData_proto >*
      mutable_anim_data();
  private:
  const ::animData_proto& _internal_anim_data(int index) const;
  ::animData_proto* _internal_add_anim_data();
  public:
  const ::animData_proto& anim_data(int index) const;
  ::animData_proto* add_anim_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::animData_proto >&
      anim_data() const;

  // repeated uint32 materialIndex = 14;
  int materialindex_size() const;
  private:
  int _internal_materialindex_size() const;
  public:
  void clear_materialindex();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_materialindex(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_materialindex() const;
  void _internal_add_materialindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_materialindex();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 materialindex(int index) const;
  void set_materialindex(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_materialindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      materialindex() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_materialindex();

  // bytes pVersion = 1;
  void clear_pversion();
  const std::string& pversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pversion();
  PROTOBUF_MUST_USE_RESULT std::string* release_pversion();
  void set_allocated_pversion(std::string* pversion);
  private:
  const std::string& _internal_pversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pversion(const std::string& value);
  std::string* _internal_mutable_pversion();
  public:

  // uint32 meshCount = 15;
  void clear_meshcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 meshcount() const;
  void set_meshcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_meshcount() const;
  void _internal_set_meshcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 texCount = 16;
  void clear_texcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 texcount() const;
  void set_texcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_texcount() const;
  void _internal_set_texcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 nameCount = 17;
  void clear_namecount();
  ::PROTOBUF_NAMESPACE_ID::uint32 namecount() const;
  void set_namecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_namecount() const;
  void _internal_set_namecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 animCount = 18;
  void clear_animcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 animcount() const;
  void set_animcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_animcount() const;
  void _internal_set_animcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:meshData_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pname_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> mode_;
  mutable std::atomic<int> _mode_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > nodenumber_;
  mutable std::atomic<int> _nodenumber_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > tricount_;
  mutable std::atomic<int> _tricount_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > vertcount_;
  mutable std::atomic<int> _vertcount_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto > vbo_vert_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto > vbo_norm_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto > vbo_uv_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto > vbo_index_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto > vbo_color_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textureData_proto > text_color_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::animData_proto > anim_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > materialindex_;
  mutable std::atomic<int> _materialindex_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pversion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meshcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 texcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 namecount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 animcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_meshData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// meshData_proto

// bytes pVersion = 1;
inline void meshData_proto::clear_pversion() {
  pversion_.ClearToEmpty();
}
inline const std::string& meshData_proto::pversion() const {
  // @@protoc_insertion_point(field_get:meshData_proto.pVersion)
  return _internal_pversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void meshData_proto::set_pversion(ArgT0&& arg0, ArgT... args) {
 
 pversion_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:meshData_proto.pVersion)
}
inline std::string* meshData_proto::mutable_pversion() {
  std::string* _s = _internal_mutable_pversion();
  // @@protoc_insertion_point(field_mutable:meshData_proto.pVersion)
  return _s;
}
inline const std::string& meshData_proto::_internal_pversion() const {
  return pversion_.Get();
}
inline void meshData_proto::_internal_set_pversion(const std::string& value) {
  
  pversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* meshData_proto::_internal_mutable_pversion() {
  
  return pversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* meshData_proto::release_pversion() {
  // @@protoc_insertion_point(field_release:meshData_proto.pVersion)
  return pversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void meshData_proto::set_allocated_pversion(std::string* pversion) {
  if (pversion != nullptr) {
    
  } else {
    
  }
  pversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pversion,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.pVersion)
}

// repeated bytes pName = 2;
inline int meshData_proto::_internal_pname_size() const {
  return pname_.size();
}
inline int meshData_proto::pname_size() const {
  return _internal_pname_size();
}
inline void meshData_proto::clear_pname() {
  pname_.Clear();
}
inline std::string* meshData_proto::add_pname() {
  std::string* _s = _internal_add_pname();
  // @@protoc_insertion_point(field_add_mutable:meshData_proto.pName)
  return _s;
}
inline const std::string& meshData_proto::_internal_pname(int index) const {
  return pname_.Get(index);
}
inline const std::string& meshData_proto::pname(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.pName)
  return _internal_pname(index);
}
inline std::string* meshData_proto::mutable_pname(int index) {
  // @@protoc_insertion_point(field_mutable:meshData_proto.pName)
  return pname_.Mutable(index);
}
inline void meshData_proto::set_pname(int index, const std::string& value) {
  pname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:meshData_proto.pName)
}
inline void meshData_proto::set_pname(int index, std::string&& value) {
  pname_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:meshData_proto.pName)
}
inline void meshData_proto::set_pname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:meshData_proto.pName)
}
inline void meshData_proto::set_pname(int index, const void* value, size_t size) {
  pname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:meshData_proto.pName)
}
inline std::string* meshData_proto::_internal_add_pname() {
  return pname_.Add();
}
inline void meshData_proto::add_pname(const std::string& value) {
  pname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:meshData_proto.pName)
}
inline void meshData_proto::add_pname(std::string&& value) {
  pname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:meshData_proto.pName)
}
inline void meshData_proto::add_pname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:meshData_proto.pName)
}
inline void meshData_proto::add_pname(const void* value, size_t size) {
  pname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:meshData_proto.pName)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
meshData_proto::pname() const {
  // @@protoc_insertion_point(field_list:meshData_proto.pName)
  return pname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
meshData_proto::mutable_pname() {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.pName)
  return &pname_;
}

// repeated .meshData_proto.RENDER_MODE mode = 3;
inline int meshData_proto::_internal_mode_size() const {
  return mode_.size();
}
inline int meshData_proto::mode_size() const {
  return _internal_mode_size();
}
inline void meshData_proto::clear_mode() {
  mode_.Clear();
}
inline ::meshData_proto_RENDER_MODE meshData_proto::_internal_mode(int index) const {
  return static_cast< ::meshData_proto_RENDER_MODE >(mode_.Get(index));
}
inline ::meshData_proto_RENDER_MODE meshData_proto::mode(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.mode)
  return _internal_mode(index);
}
inline void meshData_proto::set_mode(int index, ::meshData_proto_RENDER_MODE value) {
  mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:meshData_proto.mode)
}
inline void meshData_proto::_internal_add_mode(::meshData_proto_RENDER_MODE value) {
  mode_.Add(value);
}
inline void meshData_proto::add_mode(::meshData_proto_RENDER_MODE value) {
  _internal_add_mode(value);
  // @@protoc_insertion_point(field_add:meshData_proto.mode)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
meshData_proto::mode() const {
  // @@protoc_insertion_point(field_list:meshData_proto.mode)
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
meshData_proto::_internal_mutable_mode() {
  return &mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
meshData_proto::mutable_mode() {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.mode)
  return _internal_mutable_mode();
}

// repeated uint32 nodeNumber = 4;
inline int meshData_proto::_internal_nodenumber_size() const {
  return nodenumber_.size();
}
inline int meshData_proto::nodenumber_size() const {
  return _internal_nodenumber_size();
}
inline void meshData_proto::clear_nodenumber() {
  nodenumber_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::_internal_nodenumber(int index) const {
  return nodenumber_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::nodenumber(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.nodeNumber)
  return _internal_nodenumber(index);
}
inline void meshData_proto::set_nodenumber(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nodenumber_.Set(index, value);
  // @@protoc_insertion_point(field_set:meshData_proto.nodeNumber)
}
inline void meshData_proto::_internal_add_nodenumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nodenumber_.Add(value);
}
inline void meshData_proto::add_nodenumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_nodenumber(value);
  // @@protoc_insertion_point(field_add:meshData_proto.nodeNumber)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
meshData_proto::_internal_nodenumber() const {
  return nodenumber_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
meshData_proto::nodenumber() const {
  // @@protoc_insertion_point(field_list:meshData_proto.nodeNumber)
  return _internal_nodenumber();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
meshData_proto::_internal_mutable_nodenumber() {
  return &nodenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
meshData_proto::mutable_nodenumber() {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.nodeNumber)
  return _internal_mutable_nodenumber();
}

// repeated uint32 triCount = 5;
inline int meshData_proto::_internal_tricount_size() const {
  return tricount_.size();
}
inline int meshData_proto::tricount_size() const {
  return _internal_tricount_size();
}
inline void meshData_proto::clear_tricount() {
  tricount_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::_internal_tricount(int index) const {
  return tricount_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::tricount(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.triCount)
  return _internal_tricount(index);
}
inline void meshData_proto::set_tricount(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tricount_.Set(index, value);
  // @@protoc_insertion_point(field_set:meshData_proto.triCount)
}
inline void meshData_proto::_internal_add_tricount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tricount_.Add(value);
}
inline void meshData_proto::add_tricount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_tricount(value);
  // @@protoc_insertion_point(field_add:meshData_proto.triCount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
meshData_proto::_internal_tricount() const {
  return tricount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
meshData_proto::tricount() const {
  // @@protoc_insertion_point(field_list:meshData_proto.triCount)
  return _internal_tricount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
meshData_proto::_internal_mutable_tricount() {
  return &tricount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
meshData_proto::mutable_tricount() {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.triCount)
  return _internal_mutable_tricount();
}

// repeated uint32 vertCount = 6;
inline int meshData_proto::_internal_vertcount_size() const {
  return vertcount_.size();
}
inline int meshData_proto::vertcount_size() const {
  return _internal_vertcount_size();
}
inline void meshData_proto::clear_vertcount() {
  vertcount_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::_internal_vertcount(int index) const {
  return vertcount_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::vertcount(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.vertCount)
  return _internal_vertcount(index);
}
inline void meshData_proto::set_vertcount(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vertcount_.Set(index, value);
  // @@protoc_insertion_point(field_set:meshData_proto.vertCount)
}
inline void meshData_proto::_internal_add_vertcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vertcount_.Add(value);
}
inline void meshData_proto::add_vertcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_vertcount(value);
  // @@protoc_insertion_point(field_add:meshData_proto.vertCount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
meshData_proto::_internal_vertcount() const {
  return vertcount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
meshData_proto::vertcount() const {
  // @@protoc_insertion_point(field_list:meshData_proto.vertCount)
  return _internal_vertcount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
meshData_proto::_internal_mutable_vertcount() {
  return &vertcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
meshData_proto::mutable_vertcount() {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.vertCount)
  return _internal_mutable_vertcount();
}

// repeated .vboData_proto vbo_vert = 7;
inline int meshData_proto::_internal_vbo_vert_size() const {
  return vbo_vert_.size();
}
inline int meshData_proto::vbo_vert_size() const {
  return _internal_vbo_vert_size();
}
inline ::vboData_proto* meshData_proto::mutable_vbo_vert(int index) {
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_vert)
  return vbo_vert_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >*
meshData_proto::mutable_vbo_vert() {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.vbo_vert)
  return &vbo_vert_;
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_vert(int index) const {
  return vbo_vert_.Get(index);
}
inline const ::vboData_proto& meshData_proto::vbo_vert(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_vert)
  return _internal_vbo_vert(index);
}
inline ::vboData_proto* meshData_proto::_internal_add_vbo_vert() {
  return vbo_vert_.Add();
}
inline ::vboData_proto* meshData_proto::add_vbo_vert() {
  ::vboData_proto* _add = _internal_add_vbo_vert();
  // @@protoc_insertion_point(field_add:meshData_proto.vbo_vert)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >&
meshData_proto::vbo_vert() const {
  // @@protoc_insertion_point(field_list:meshData_proto.vbo_vert)
  return vbo_vert_;
}

// repeated .vboData_proto vbo_norm = 8;
inline int meshData_proto::_internal_vbo_norm_size() const {
  return vbo_norm_.size();
}
inline int meshData_proto::vbo_norm_size() const {
  return _internal_vbo_norm_size();
}
inline ::vboData_proto* meshData_proto::mutable_vbo_norm(int index) {
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_norm)
  return vbo_norm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >*
meshData_proto::mutable_vbo_norm() {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.vbo_norm)
  return &vbo_norm_;
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_norm(int index) const {
  return vbo_norm_.Get(index);
}
inline const ::vboData_proto& meshData_proto::vbo_norm(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_norm)
  return _internal_vbo_norm(index);
}
inline ::vboData_proto* meshData_proto::_internal_add_vbo_norm() {
  return vbo_norm_.Add();
}
inline ::vboData_proto* meshData_proto::add_vbo_norm() {
  ::vboData_proto* _add = _internal_add_vbo_norm();
  // @@protoc_insertion_point(field_add:meshData_proto.vbo_norm)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >&
meshData_proto::vbo_norm() const {
  // @@protoc_insertion_point(field_list:meshData_proto.vbo_norm)
  return vbo_norm_;
}

// repeated .vboData_proto vbo_uv = 9;
inline int meshData_proto::_internal_vbo_uv_size() const {
  return vbo_uv_.size();
}
inline int meshData_proto::vbo_uv_size() const {
  return _internal_vbo_uv_size();
}
inline ::vboData_proto* meshData_proto::mutable_vbo_uv(int index) {
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_uv)
  return vbo_uv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >*
meshData_proto::mutable_vbo_uv() {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.vbo_uv)
  return &vbo_uv_;
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_uv(int index) const {
  return vbo_uv_.Get(index);
}
inline const ::vboData_proto& meshData_proto::vbo_uv(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_uv)
  return _internal_vbo_uv(index);
}
inline ::vboData_proto* meshData_proto::_internal_add_vbo_uv() {
  return vbo_uv_.Add();
}
inline ::vboData_proto* meshData_proto::add_vbo_uv() {
  ::vboData_proto* _add = _internal_add_vbo_uv();
  // @@protoc_insertion_point(field_add:meshData_proto.vbo_uv)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >&
meshData_proto::vbo_uv() const {
  // @@protoc_insertion_point(field_list:meshData_proto.vbo_uv)
  return vbo_uv_;
}

// repeated .vboData_proto vbo_index = 10;
inline int meshData_proto::_internal_vbo_index_size() const {
  return vbo_index_.size();
}
inline int meshData_proto::vbo_index_size() const {
  return _internal_vbo_index_size();
}
inline ::vboData_proto* meshData_proto::mutable_vbo_index(int index) {
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_index)
  return vbo_index_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >*
meshData_proto::mutable_vbo_index() {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.vbo_index)
  return &vbo_index_;
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_index(int index) const {
  return vbo_index_.Get(index);
}
inline const ::vboData_proto& meshData_proto::vbo_index(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_index)
  return _internal_vbo_index(index);
}
inline ::vboData_proto* meshData_proto::_internal_add_vbo_index() {
  return vbo_index_.Add();
}
inline ::vboData_proto* meshData_proto::add_vbo_index() {
  ::vboData_proto* _add = _internal_add_vbo_index();
  // @@protoc_insertion_point(field_add:meshData_proto.vbo_index)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >&
meshData_proto::vbo_index() const {
  // @@protoc_insertion_point(field_list:meshData_proto.vbo_index)
  return vbo_index_;
}

// repeated .vboData_proto vbo_color = 11;
inline int meshData_proto::_internal_vbo_color_size() const {
  return vbo_color_.size();
}
inline int meshData_proto::vbo_color_size() const {
  return _internal_vbo_color_size();
}
inline ::vboData_proto* meshData_proto::mutable_vbo_color(int index) {
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_color)
  return vbo_color_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >*
meshData_proto::mutable_vbo_color() {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.vbo_color)
  return &vbo_color_;
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_color(int index) const {
  return vbo_color_.Get(index);
}
inline const ::vboData_proto& meshData_proto::vbo_color(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_color)
  return _internal_vbo_color(index);
}
inline ::vboData_proto* meshData_proto::_internal_add_vbo_color() {
  return vbo_color_.Add();
}
inline ::vboData_proto* meshData_proto::add_vbo_color() {
  ::vboData_proto* _add = _internal_add_vbo_color();
  // @@protoc_insertion_point(field_add:meshData_proto.vbo_color)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vboData_proto >&
meshData_proto::vbo_color() const {
  // @@protoc_insertion_point(field_list:meshData_proto.vbo_color)
  return vbo_color_;
}

// repeated .textureData_proto text_color = 12;
inline int meshData_proto::_internal_text_color_size() const {
  return text_color_.size();
}
inline int meshData_proto::text_color_size() const {
  return _internal_text_color_size();
}
inline ::textureData_proto* meshData_proto::mutable_text_color(int index) {
  // @@protoc_insertion_point(field_mutable:meshData_proto.text_color)
  return text_color_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textureData_proto >*
meshData_proto::mutable_text_color() {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.text_color)
  return &text_color_;
}
inline const ::textureData_proto& meshData_proto::_internal_text_color(int index) const {
  return text_color_.Get(index);
}
inline const ::textureData_proto& meshData_proto::text_color(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.text_color)
  return _internal_text_color(index);
}
inline ::textureData_proto* meshData_proto::_internal_add_text_color() {
  return text_color_.Add();
}
inline ::textureData_proto* meshData_proto::add_text_color() {
  ::textureData_proto* _add = _internal_add_text_color();
  // @@protoc_insertion_point(field_add:meshData_proto.text_color)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textureData_proto >&
meshData_proto::text_color() const {
  // @@protoc_insertion_point(field_list:meshData_proto.text_color)
  return text_color_;
}

// repeated .animData_proto anim_data = 13;
inline int meshData_proto::_internal_anim_data_size() const {
  return anim_data_.size();
}
inline int meshData_proto::anim_data_size() const {
  return _internal_anim_data_size();
}
inline ::animData_proto* meshData_proto::mutable_anim_data(int index) {
  // @@protoc_insertion_point(field_mutable:meshData_proto.anim_data)
  return anim_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::animData_proto >*
meshData_proto::mutable_anim_data() {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.anim_data)
  return &anim_data_;
}
inline const ::animData_proto& meshData_proto::_internal_anim_data(int index) const {
  return anim_data_.Get(index);
}
inline const ::animData_proto& meshData_proto::anim_data(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.anim_data)
  return _internal_anim_data(index);
}
inline ::animData_proto* meshData_proto::_internal_add_anim_data() {
  return anim_data_.Add();
}
inline ::animData_proto* meshData_proto::add_anim_data() {
  ::animData_proto* _add = _internal_add_anim_data();
  // @@protoc_insertion_point(field_add:meshData_proto.anim_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::animData_proto >&
meshData_proto::anim_data() const {
  // @@protoc_insertion_point(field_list:meshData_proto.anim_data)
  return anim_data_;
}

// repeated uint32 materialIndex = 14;
inline int meshData_proto::_internal_materialindex_size() const {
  return materialindex_.size();
}
inline int meshData_proto::materialindex_size() const {
  return _internal_materialindex_size();
}
inline void meshData_proto::clear_materialindex() {
  materialindex_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::_internal_materialindex(int index) const {
  return materialindex_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::materialindex(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.materialIndex)
  return _internal_materialindex(index);
}
inline void meshData_proto::set_materialindex(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  materialindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:meshData_proto.materialIndex)
}
inline void meshData_proto::_internal_add_materialindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  materialindex_.Add(value);
}
inline void meshData_proto::add_materialindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_materialindex(value);
  // @@protoc_insertion_point(field_add:meshData_proto.materialIndex)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
meshData_proto::_internal_materialindex() const {
  return materialindex_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
meshData_proto::materialindex() const {
  // @@protoc_insertion_point(field_list:meshData_proto.materialIndex)
  return _internal_materialindex();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
meshData_proto::_internal_mutable_materialindex() {
  return &materialindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
meshData_proto::mutable_materialindex() {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.materialIndex)
  return _internal_mutable_materialindex();
}

// uint32 meshCount = 15;
inline void meshData_proto::clear_meshcount() {
  meshcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::_internal_meshcount() const {
  return meshcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::meshcount() const {
  // @@protoc_insertion_point(field_get:meshData_proto.meshCount)
  return _internal_meshcount();
}
inline void meshData_proto::_internal_set_meshcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  meshcount_ = value;
}
inline void meshData_proto::set_meshcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_meshcount(value);
  // @@protoc_insertion_point(field_set:meshData_proto.meshCount)
}

// uint32 texCount = 16;
inline void meshData_proto::clear_texcount() {
  texcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::_internal_texcount() const {
  return texcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::texcount() const {
  // @@protoc_insertion_point(field_get:meshData_proto.texCount)
  return _internal_texcount();
}
inline void meshData_proto::_internal_set_texcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  texcount_ = value;
}
inline void meshData_proto::set_texcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_texcount(value);
  // @@protoc_insertion_point(field_set:meshData_proto.texCount)
}

// uint32 nameCount = 17;
inline void meshData_proto::clear_namecount() {
  namecount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::_internal_namecount() const {
  return namecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::namecount() const {
  // @@protoc_insertion_point(field_get:meshData_proto.nameCount)
  return _internal_namecount();
}
inline void meshData_proto::_internal_set_namecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  namecount_ = value;
}
inline void meshData_proto::set_namecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_namecount(value);
  // @@protoc_insertion_point(field_set:meshData_proto.nameCount)
}

// uint32 animCount = 18;
inline void meshData_proto::clear_animcount() {
  animcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::_internal_animcount() const {
  return animcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 meshData_proto::animcount() const {
  // @@protoc_insertion_point(field_get:meshData_proto.animCount)
  return _internal_animcount();
}
inline void meshData_proto::_internal_set_animcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  animcount_ = value;
}
inline void meshData_proto::set_animcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_animcount(value);
  // @@protoc_insertion_point(field_set:meshData_proto.animCount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::meshData_proto_RENDER_MODE> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_meshData_2eproto
