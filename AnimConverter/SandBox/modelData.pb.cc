// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modelData.proto

#include "modelData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr modelData_proto::modelData_proto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vbo_vert_(nullptr)
  , vbo_norm_(nullptr)
  , vbo_uv_(nullptr)
  , vbo_trilist_(nullptr)
  , text_color_(nullptr)
  , text_normal_(nullptr)
  , text_rough_(nullptr){}
struct modelData_protoDefaultTypeInternal {
  constexpr modelData_protoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~modelData_protoDefaultTypeInternal() {}
  union {
    modelData_proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT modelData_protoDefaultTypeInternal _modelData_proto_default_instance_;

// ===================================================================

class modelData_proto::_Internal {
 public:
  using HasBits = decltype(std::declval<modelData_proto>()._has_bits_);
  static const ::vboData_proto& vbo_vert(const modelData_proto* msg);
  static void set_has_vbo_vert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::vboData_proto& vbo_norm(const modelData_proto* msg);
  static void set_has_vbo_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::vboData_proto& vbo_uv(const modelData_proto* msg);
  static void set_has_vbo_uv(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::vboData_proto& vbo_trilist(const modelData_proto* msg);
  static void set_has_vbo_trilist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::textureData_proto& text_color(const modelData_proto* msg);
  static void set_has_text_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::textureData_proto& text_normal(const modelData_proto* msg);
  static void set_has_text_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::textureData_proto& text_rough(const modelData_proto* msg);
  static void set_has_text_rough(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::vboData_proto&
modelData_proto::_Internal::vbo_vert(const modelData_proto* msg) {
  return *msg->vbo_vert_;
}
const ::vboData_proto&
modelData_proto::_Internal::vbo_norm(const modelData_proto* msg) {
  return *msg->vbo_norm_;
}
const ::vboData_proto&
modelData_proto::_Internal::vbo_uv(const modelData_proto* msg) {
  return *msg->vbo_uv_;
}
const ::vboData_proto&
modelData_proto::_Internal::vbo_trilist(const modelData_proto* msg) {
  return *msg->vbo_trilist_;
}
const ::textureData_proto&
modelData_proto::_Internal::text_color(const modelData_proto* msg) {
  return *msg->text_color_;
}
const ::textureData_proto&
modelData_proto::_Internal::text_normal(const modelData_proto* msg) {
  return *msg->text_normal_;
}
const ::textureData_proto&
modelData_proto::_Internal::text_rough(const modelData_proto* msg) {
  return *msg->text_rough_;
}
void modelData_proto::clear_vbo_vert() {
  if (vbo_vert_ != nullptr) vbo_vert_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void modelData_proto::clear_vbo_norm() {
  if (vbo_norm_ != nullptr) vbo_norm_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void modelData_proto::clear_vbo_uv() {
  if (vbo_uv_ != nullptr) vbo_uv_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void modelData_proto::clear_vbo_trilist() {
  if (vbo_trilist_ != nullptr) vbo_trilist_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void modelData_proto::clear_text_color() {
  if (text_color_ != nullptr) text_color_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void modelData_proto::clear_text_normal() {
  if (text_normal_ != nullptr) text_normal_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void modelData_proto::clear_text_rough() {
  if (text_rough_ != nullptr) text_rough_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
modelData_proto::modelData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:modelData_proto)
}
modelData_proto::modelData_proto(const modelData_proto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_vbo_vert()) {
    vbo_vert_ = new ::vboData_proto(*from.vbo_vert_);
  } else {
    vbo_vert_ = nullptr;
  }
  if (from._internal_has_vbo_norm()) {
    vbo_norm_ = new ::vboData_proto(*from.vbo_norm_);
  } else {
    vbo_norm_ = nullptr;
  }
  if (from._internal_has_vbo_uv()) {
    vbo_uv_ = new ::vboData_proto(*from.vbo_uv_);
  } else {
    vbo_uv_ = nullptr;
  }
  if (from._internal_has_vbo_trilist()) {
    vbo_trilist_ = new ::vboData_proto(*from.vbo_trilist_);
  } else {
    vbo_trilist_ = nullptr;
  }
  if (from._internal_has_text_color()) {
    text_color_ = new ::textureData_proto(*from.text_color_);
  } else {
    text_color_ = nullptr;
  }
  if (from._internal_has_text_normal()) {
    text_normal_ = new ::textureData_proto(*from.text_normal_);
  } else {
    text_normal_ = nullptr;
  }
  if (from._internal_has_text_rough()) {
    text_rough_ = new ::textureData_proto(*from.text_rough_);
  } else {
    text_rough_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:modelData_proto)
}

inline void modelData_proto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vbo_vert_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_rough_) -
    reinterpret_cast<char*>(&vbo_vert_)) + sizeof(text_rough_));
}

modelData_proto::~modelData_proto() {
  // @@protoc_insertion_point(destructor:modelData_proto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void modelData_proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vbo_vert_;
  if (this != internal_default_instance()) delete vbo_norm_;
  if (this != internal_default_instance()) delete vbo_uv_;
  if (this != internal_default_instance()) delete vbo_trilist_;
  if (this != internal_default_instance()) delete text_color_;
  if (this != internal_default_instance()) delete text_normal_;
  if (this != internal_default_instance()) delete text_rough_;
}

void modelData_proto::ArenaDtor(void* object) {
  modelData_proto* _this = reinterpret_cast< modelData_proto* >(object);
  (void)_this;
}
void modelData_proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void modelData_proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void modelData_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:modelData_proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vbo_vert_ != nullptr);
      vbo_vert_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vbo_norm_ != nullptr);
      vbo_norm_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vbo_uv_ != nullptr);
      vbo_uv_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(vbo_trilist_ != nullptr);
      vbo_trilist_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(text_color_ != nullptr);
      text_color_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(text_normal_ != nullptr);
      text_normal_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(text_rough_ != nullptr);
      text_rough_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* modelData_proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .vboData_proto vbo_vert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vbo_vert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vboData_proto vbo_norm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vbo_norm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vboData_proto vbo_uv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vbo_uv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .vboData_proto vbo_trilist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vbo_trilist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .textureData_proto text_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .textureData_proto text_normal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .textureData_proto text_rough = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_rough(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* modelData_proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:modelData_proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .vboData_proto vbo_vert = 1;
  if (_internal_has_vbo_vert()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vbo_vert(this), target, stream);
  }

  // optional .vboData_proto vbo_norm = 2;
  if (_internal_has_vbo_norm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vbo_norm(this), target, stream);
  }

  // optional .vboData_proto vbo_uv = 3;
  if (_internal_has_vbo_uv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vbo_uv(this), target, stream);
  }

  // optional .vboData_proto vbo_trilist = 4;
  if (_internal_has_vbo_trilist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vbo_trilist(this), target, stream);
  }

  // optional .textureData_proto text_color = 5;
  if (_internal_has_text_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::text_color(this), target, stream);
  }

  // optional .textureData_proto text_normal = 6;
  if (_internal_has_text_normal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::text_normal(this), target, stream);
  }

  // optional .textureData_proto text_rough = 7;
  if (_internal_has_text_rough()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::text_rough(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modelData_proto)
  return target;
}

size_t modelData_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:modelData_proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .vboData_proto vbo_vert = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vbo_vert_);
    }

    // optional .vboData_proto vbo_norm = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vbo_norm_);
    }

    // optional .vboData_proto vbo_uv = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vbo_uv_);
    }

    // optional .vboData_proto vbo_trilist = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vbo_trilist_);
    }

    // optional .textureData_proto text_color = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_color_);
    }

    // optional .textureData_proto text_normal = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_normal_);
    }

    // optional .textureData_proto text_rough = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_rough_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void modelData_proto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const modelData_proto*>(
      &from));
}

void modelData_proto::MergeFrom(const modelData_proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:modelData_proto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vbo_vert()->::vboData_proto::MergeFrom(from._internal_vbo_vert());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vbo_norm()->::vboData_proto::MergeFrom(from._internal_vbo_norm());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vbo_uv()->::vboData_proto::MergeFrom(from._internal_vbo_uv());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_vbo_trilist()->::vboData_proto::MergeFrom(from._internal_vbo_trilist());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_text_color()->::textureData_proto::MergeFrom(from._internal_text_color());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_text_normal()->::textureData_proto::MergeFrom(from._internal_text_normal());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_text_rough()->::textureData_proto::MergeFrom(from._internal_text_rough());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void modelData_proto::CopyFrom(const modelData_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:modelData_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modelData_proto::IsInitialized() const {
  return true;
}

void modelData_proto::InternalSwap(modelData_proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(modelData_proto, text_rough_)
      + sizeof(modelData_proto::text_rough_)
      - PROTOBUF_FIELD_OFFSET(modelData_proto, vbo_vert_)>(
          reinterpret_cast<char*>(&vbo_vert_),
          reinterpret_cast<char*>(&other->vbo_vert_));
}

std::string modelData_proto::GetTypeName() const {
  return "modelData_proto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::modelData_proto* Arena::CreateMaybeMessage< ::modelData_proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::modelData_proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
