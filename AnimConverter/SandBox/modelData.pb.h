// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modelData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modelData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modelData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "vboData.pb.h"
#include "textureData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modelData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modelData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class modelData_proto;
struct modelData_protoDefaultTypeInternal;
extern modelData_protoDefaultTypeInternal _modelData_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::modelData_proto* Arena::CreateMaybeMessage<::modelData_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class modelData_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:modelData_proto) */ {
 public:
  inline modelData_proto() : modelData_proto(nullptr) {}
  ~modelData_proto() override;
  explicit constexpr modelData_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  modelData_proto(const modelData_proto& from);
  modelData_proto(modelData_proto&& from) noexcept
    : modelData_proto() {
    *this = ::std::move(from);
  }

  inline modelData_proto& operator=(const modelData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline modelData_proto& operator=(modelData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const modelData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const modelData_proto* internal_default_instance() {
    return reinterpret_cast<const modelData_proto*>(
               &_modelData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(modelData_proto& a, modelData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(modelData_proto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(modelData_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline modelData_proto* New() const final {
    return new modelData_proto();
  }

  modelData_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<modelData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const modelData_proto& from);
  void MergeFrom(const modelData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(modelData_proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "modelData_proto";
  }
  protected:
  explicit modelData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVboVertFieldNumber = 1,
    kVboNormFieldNumber = 2,
    kVboUvFieldNumber = 3,
    kVboTrilistFieldNumber = 4,
    kTextColorFieldNumber = 5,
    kTextNormalFieldNumber = 6,
    kTextRoughFieldNumber = 7,
  };
  // optional .vboData_proto vbo_vert = 1;
  bool has_vbo_vert() const;
  private:
  bool _internal_has_vbo_vert() const;
  public:
  void clear_vbo_vert();
  const ::vboData_proto& vbo_vert() const;
  PROTOBUF_MUST_USE_RESULT ::vboData_proto* release_vbo_vert();
  ::vboData_proto* mutable_vbo_vert();
  void set_allocated_vbo_vert(::vboData_proto* vbo_vert);
  private:
  const ::vboData_proto& _internal_vbo_vert() const;
  ::vboData_proto* _internal_mutable_vbo_vert();
  public:
  void unsafe_arena_set_allocated_vbo_vert(
      ::vboData_proto* vbo_vert);
  ::vboData_proto* unsafe_arena_release_vbo_vert();

  // optional .vboData_proto vbo_norm = 2;
  bool has_vbo_norm() const;
  private:
  bool _internal_has_vbo_norm() const;
  public:
  void clear_vbo_norm();
  const ::vboData_proto& vbo_norm() const;
  PROTOBUF_MUST_USE_RESULT ::vboData_proto* release_vbo_norm();
  ::vboData_proto* mutable_vbo_norm();
  void set_allocated_vbo_norm(::vboData_proto* vbo_norm);
  private:
  const ::vboData_proto& _internal_vbo_norm() const;
  ::vboData_proto* _internal_mutable_vbo_norm();
  public:
  void unsafe_arena_set_allocated_vbo_norm(
      ::vboData_proto* vbo_norm);
  ::vboData_proto* unsafe_arena_release_vbo_norm();

  // optional .vboData_proto vbo_uv = 3;
  bool has_vbo_uv() const;
  private:
  bool _internal_has_vbo_uv() const;
  public:
  void clear_vbo_uv();
  const ::vboData_proto& vbo_uv() const;
  PROTOBUF_MUST_USE_RESULT ::vboData_proto* release_vbo_uv();
  ::vboData_proto* mutable_vbo_uv();
  void set_allocated_vbo_uv(::vboData_proto* vbo_uv);
  private:
  const ::vboData_proto& _internal_vbo_uv() const;
  ::vboData_proto* _internal_mutable_vbo_uv();
  public:
  void unsafe_arena_set_allocated_vbo_uv(
      ::vboData_proto* vbo_uv);
  ::vboData_proto* unsafe_arena_release_vbo_uv();

  // optional .vboData_proto vbo_trilist = 4;
  bool has_vbo_trilist() const;
  private:
  bool _internal_has_vbo_trilist() const;
  public:
  void clear_vbo_trilist();
  const ::vboData_proto& vbo_trilist() const;
  PROTOBUF_MUST_USE_RESULT ::vboData_proto* release_vbo_trilist();
  ::vboData_proto* mutable_vbo_trilist();
  void set_allocated_vbo_trilist(::vboData_proto* vbo_trilist);
  private:
  const ::vboData_proto& _internal_vbo_trilist() const;
  ::vboData_proto* _internal_mutable_vbo_trilist();
  public:
  void unsafe_arena_set_allocated_vbo_trilist(
      ::vboData_proto* vbo_trilist);
  ::vboData_proto* unsafe_arena_release_vbo_trilist();

  // optional .textureData_proto text_color = 5;
  bool has_text_color() const;
  private:
  bool _internal_has_text_color() const;
  public:
  void clear_text_color();
  const ::textureData_proto& text_color() const;
  PROTOBUF_MUST_USE_RESULT ::textureData_proto* release_text_color();
  ::textureData_proto* mutable_text_color();
  void set_allocated_text_color(::textureData_proto* text_color);
  private:
  const ::textureData_proto& _internal_text_color() const;
  ::textureData_proto* _internal_mutable_text_color();
  public:
  void unsafe_arena_set_allocated_text_color(
      ::textureData_proto* text_color);
  ::textureData_proto* unsafe_arena_release_text_color();

  // optional .textureData_proto text_normal = 6;
  bool has_text_normal() const;
  private:
  bool _internal_has_text_normal() const;
  public:
  void clear_text_normal();
  const ::textureData_proto& text_normal() const;
  PROTOBUF_MUST_USE_RESULT ::textureData_proto* release_text_normal();
  ::textureData_proto* mutable_text_normal();
  void set_allocated_text_normal(::textureData_proto* text_normal);
  private:
  const ::textureData_proto& _internal_text_normal() const;
  ::textureData_proto* _internal_mutable_text_normal();
  public:
  void unsafe_arena_set_allocated_text_normal(
      ::textureData_proto* text_normal);
  ::textureData_proto* unsafe_arena_release_text_normal();

  // optional .textureData_proto text_rough = 7;
  bool has_text_rough() const;
  private:
  bool _internal_has_text_rough() const;
  public:
  void clear_text_rough();
  const ::textureData_proto& text_rough() const;
  PROTOBUF_MUST_USE_RESULT ::textureData_proto* release_text_rough();
  ::textureData_proto* mutable_text_rough();
  void set_allocated_text_rough(::textureData_proto* text_rough);
  private:
  const ::textureData_proto& _internal_text_rough() const;
  ::textureData_proto* _internal_mutable_text_rough();
  public:
  void unsafe_arena_set_allocated_text_rough(
      ::textureData_proto* text_rough);
  ::textureData_proto* unsafe_arena_release_text_rough();

  // @@protoc_insertion_point(class_scope:modelData_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::vboData_proto* vbo_vert_;
  ::vboData_proto* vbo_norm_;
  ::vboData_proto* vbo_uv_;
  ::vboData_proto* vbo_trilist_;
  ::textureData_proto* text_color_;
  ::textureData_proto* text_normal_;
  ::textureData_proto* text_rough_;
  friend struct ::TableStruct_modelData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// modelData_proto

// optional .vboData_proto vbo_vert = 1;
inline bool modelData_proto::_internal_has_vbo_vert() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || vbo_vert_ != nullptr);
  return value;
}
inline bool modelData_proto::has_vbo_vert() const {
  return _internal_has_vbo_vert();
}
inline const ::vboData_proto& modelData_proto::_internal_vbo_vert() const {
  const ::vboData_proto* p = vbo_vert_;
  return p != nullptr ? *p : reinterpret_cast<const ::vboData_proto&>(
      ::_vboData_proto_default_instance_);
}
inline const ::vboData_proto& modelData_proto::vbo_vert() const {
  // @@protoc_insertion_point(field_get:modelData_proto.vbo_vert)
  return _internal_vbo_vert();
}
inline void modelData_proto::unsafe_arena_set_allocated_vbo_vert(
    ::vboData_proto* vbo_vert) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_vert_);
  }
  vbo_vert_ = vbo_vert;
  if (vbo_vert) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:modelData_proto.vbo_vert)
}
inline ::vboData_proto* modelData_proto::release_vbo_vert() {
  _has_bits_[0] &= ~0x00000001u;
  ::vboData_proto* temp = vbo_vert_;
  vbo_vert_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vboData_proto* modelData_proto::unsafe_arena_release_vbo_vert() {
  // @@protoc_insertion_point(field_release:modelData_proto.vbo_vert)
  _has_bits_[0] &= ~0x00000001u;
  ::vboData_proto* temp = vbo_vert_;
  vbo_vert_ = nullptr;
  return temp;
}
inline ::vboData_proto* modelData_proto::_internal_mutable_vbo_vert() {
  _has_bits_[0] |= 0x00000001u;
  if (vbo_vert_ == nullptr) {
    auto* p = CreateMaybeMessage<::vboData_proto>(GetArenaForAllocation());
    vbo_vert_ = p;
  }
  return vbo_vert_;
}
inline ::vboData_proto* modelData_proto::mutable_vbo_vert() {
  ::vboData_proto* _msg = _internal_mutable_vbo_vert();
  // @@protoc_insertion_point(field_mutable:modelData_proto.vbo_vert)
  return _msg;
}
inline void modelData_proto::set_allocated_vbo_vert(::vboData_proto* vbo_vert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_vert_);
  }
  if (vbo_vert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_vert));
    if (message_arena != submessage_arena) {
      vbo_vert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vbo_vert, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vbo_vert_ = vbo_vert;
  // @@protoc_insertion_point(field_set_allocated:modelData_proto.vbo_vert)
}

// optional .vboData_proto vbo_norm = 2;
inline bool modelData_proto::_internal_has_vbo_norm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || vbo_norm_ != nullptr);
  return value;
}
inline bool modelData_proto::has_vbo_norm() const {
  return _internal_has_vbo_norm();
}
inline const ::vboData_proto& modelData_proto::_internal_vbo_norm() const {
  const ::vboData_proto* p = vbo_norm_;
  return p != nullptr ? *p : reinterpret_cast<const ::vboData_proto&>(
      ::_vboData_proto_default_instance_);
}
inline const ::vboData_proto& modelData_proto::vbo_norm() const {
  // @@protoc_insertion_point(field_get:modelData_proto.vbo_norm)
  return _internal_vbo_norm();
}
inline void modelData_proto::unsafe_arena_set_allocated_vbo_norm(
    ::vboData_proto* vbo_norm) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_norm_);
  }
  vbo_norm_ = vbo_norm;
  if (vbo_norm) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:modelData_proto.vbo_norm)
}
inline ::vboData_proto* modelData_proto::release_vbo_norm() {
  _has_bits_[0] &= ~0x00000002u;
  ::vboData_proto* temp = vbo_norm_;
  vbo_norm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vboData_proto* modelData_proto::unsafe_arena_release_vbo_norm() {
  // @@protoc_insertion_point(field_release:modelData_proto.vbo_norm)
  _has_bits_[0] &= ~0x00000002u;
  ::vboData_proto* temp = vbo_norm_;
  vbo_norm_ = nullptr;
  return temp;
}
inline ::vboData_proto* modelData_proto::_internal_mutable_vbo_norm() {
  _has_bits_[0] |= 0x00000002u;
  if (vbo_norm_ == nullptr) {
    auto* p = CreateMaybeMessage<::vboData_proto>(GetArenaForAllocation());
    vbo_norm_ = p;
  }
  return vbo_norm_;
}
inline ::vboData_proto* modelData_proto::mutable_vbo_norm() {
  ::vboData_proto* _msg = _internal_mutable_vbo_norm();
  // @@protoc_insertion_point(field_mutable:modelData_proto.vbo_norm)
  return _msg;
}
inline void modelData_proto::set_allocated_vbo_norm(::vboData_proto* vbo_norm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_norm_);
  }
  if (vbo_norm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_norm));
    if (message_arena != submessage_arena) {
      vbo_norm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vbo_norm, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vbo_norm_ = vbo_norm;
  // @@protoc_insertion_point(field_set_allocated:modelData_proto.vbo_norm)
}

// optional .vboData_proto vbo_uv = 3;
inline bool modelData_proto::_internal_has_vbo_uv() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || vbo_uv_ != nullptr);
  return value;
}
inline bool modelData_proto::has_vbo_uv() const {
  return _internal_has_vbo_uv();
}
inline const ::vboData_proto& modelData_proto::_internal_vbo_uv() const {
  const ::vboData_proto* p = vbo_uv_;
  return p != nullptr ? *p : reinterpret_cast<const ::vboData_proto&>(
      ::_vboData_proto_default_instance_);
}
inline const ::vboData_proto& modelData_proto::vbo_uv() const {
  // @@protoc_insertion_point(field_get:modelData_proto.vbo_uv)
  return _internal_vbo_uv();
}
inline void modelData_proto::unsafe_arena_set_allocated_vbo_uv(
    ::vboData_proto* vbo_uv) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_uv_);
  }
  vbo_uv_ = vbo_uv;
  if (vbo_uv) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:modelData_proto.vbo_uv)
}
inline ::vboData_proto* modelData_proto::release_vbo_uv() {
  _has_bits_[0] &= ~0x00000004u;
  ::vboData_proto* temp = vbo_uv_;
  vbo_uv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vboData_proto* modelData_proto::unsafe_arena_release_vbo_uv() {
  // @@protoc_insertion_point(field_release:modelData_proto.vbo_uv)
  _has_bits_[0] &= ~0x00000004u;
  ::vboData_proto* temp = vbo_uv_;
  vbo_uv_ = nullptr;
  return temp;
}
inline ::vboData_proto* modelData_proto::_internal_mutable_vbo_uv() {
  _has_bits_[0] |= 0x00000004u;
  if (vbo_uv_ == nullptr) {
    auto* p = CreateMaybeMessage<::vboData_proto>(GetArenaForAllocation());
    vbo_uv_ = p;
  }
  return vbo_uv_;
}
inline ::vboData_proto* modelData_proto::mutable_vbo_uv() {
  ::vboData_proto* _msg = _internal_mutable_vbo_uv();
  // @@protoc_insertion_point(field_mutable:modelData_proto.vbo_uv)
  return _msg;
}
inline void modelData_proto::set_allocated_vbo_uv(::vboData_proto* vbo_uv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_uv_);
  }
  if (vbo_uv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_uv));
    if (message_arena != submessage_arena) {
      vbo_uv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vbo_uv, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vbo_uv_ = vbo_uv;
  // @@protoc_insertion_point(field_set_allocated:modelData_proto.vbo_uv)
}

// optional .vboData_proto vbo_trilist = 4;
inline bool modelData_proto::_internal_has_vbo_trilist() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || vbo_trilist_ != nullptr);
  return value;
}
inline bool modelData_proto::has_vbo_trilist() const {
  return _internal_has_vbo_trilist();
}
inline const ::vboData_proto& modelData_proto::_internal_vbo_trilist() const {
  const ::vboData_proto* p = vbo_trilist_;
  return p != nullptr ? *p : reinterpret_cast<const ::vboData_proto&>(
      ::_vboData_proto_default_instance_);
}
inline const ::vboData_proto& modelData_proto::vbo_trilist() const {
  // @@protoc_insertion_point(field_get:modelData_proto.vbo_trilist)
  return _internal_vbo_trilist();
}
inline void modelData_proto::unsafe_arena_set_allocated_vbo_trilist(
    ::vboData_proto* vbo_trilist) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_trilist_);
  }
  vbo_trilist_ = vbo_trilist;
  if (vbo_trilist) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:modelData_proto.vbo_trilist)
}
inline ::vboData_proto* modelData_proto::release_vbo_trilist() {
  _has_bits_[0] &= ~0x00000008u;
  ::vboData_proto* temp = vbo_trilist_;
  vbo_trilist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vboData_proto* modelData_proto::unsafe_arena_release_vbo_trilist() {
  // @@protoc_insertion_point(field_release:modelData_proto.vbo_trilist)
  _has_bits_[0] &= ~0x00000008u;
  ::vboData_proto* temp = vbo_trilist_;
  vbo_trilist_ = nullptr;
  return temp;
}
inline ::vboData_proto* modelData_proto::_internal_mutable_vbo_trilist() {
  _has_bits_[0] |= 0x00000008u;
  if (vbo_trilist_ == nullptr) {
    auto* p = CreateMaybeMessage<::vboData_proto>(GetArenaForAllocation());
    vbo_trilist_ = p;
  }
  return vbo_trilist_;
}
inline ::vboData_proto* modelData_proto::mutable_vbo_trilist() {
  ::vboData_proto* _msg = _internal_mutable_vbo_trilist();
  // @@protoc_insertion_point(field_mutable:modelData_proto.vbo_trilist)
  return _msg;
}
inline void modelData_proto::set_allocated_vbo_trilist(::vboData_proto* vbo_trilist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_trilist_);
  }
  if (vbo_trilist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vbo_trilist));
    if (message_arena != submessage_arena) {
      vbo_trilist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vbo_trilist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  vbo_trilist_ = vbo_trilist;
  // @@protoc_insertion_point(field_set_allocated:modelData_proto.vbo_trilist)
}

// optional .textureData_proto text_color = 5;
inline bool modelData_proto::_internal_has_text_color() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || text_color_ != nullptr);
  return value;
}
inline bool modelData_proto::has_text_color() const {
  return _internal_has_text_color();
}
inline const ::textureData_proto& modelData_proto::_internal_text_color() const {
  const ::textureData_proto* p = text_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::textureData_proto&>(
      ::_textureData_proto_default_instance_);
}
inline const ::textureData_proto& modelData_proto::text_color() const {
  // @@protoc_insertion_point(field_get:modelData_proto.text_color)
  return _internal_text_color();
}
inline void modelData_proto::unsafe_arena_set_allocated_text_color(
    ::textureData_proto* text_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_color_);
  }
  text_color_ = text_color;
  if (text_color) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:modelData_proto.text_color)
}
inline ::textureData_proto* modelData_proto::release_text_color() {
  _has_bits_[0] &= ~0x00000010u;
  ::textureData_proto* temp = text_color_;
  text_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::textureData_proto* modelData_proto::unsafe_arena_release_text_color() {
  // @@protoc_insertion_point(field_release:modelData_proto.text_color)
  _has_bits_[0] &= ~0x00000010u;
  ::textureData_proto* temp = text_color_;
  text_color_ = nullptr;
  return temp;
}
inline ::textureData_proto* modelData_proto::_internal_mutable_text_color() {
  _has_bits_[0] |= 0x00000010u;
  if (text_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::textureData_proto>(GetArenaForAllocation());
    text_color_ = p;
  }
  return text_color_;
}
inline ::textureData_proto* modelData_proto::mutable_text_color() {
  ::textureData_proto* _msg = _internal_mutable_text_color();
  // @@protoc_insertion_point(field_mutable:modelData_proto.text_color)
  return _msg;
}
inline void modelData_proto::set_allocated_text_color(::textureData_proto* text_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_color_);
  }
  if (text_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_color));
    if (message_arena != submessage_arena) {
      text_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  text_color_ = text_color;
  // @@protoc_insertion_point(field_set_allocated:modelData_proto.text_color)
}

// optional .textureData_proto text_normal = 6;
inline bool modelData_proto::_internal_has_text_normal() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || text_normal_ != nullptr);
  return value;
}
inline bool modelData_proto::has_text_normal() const {
  return _internal_has_text_normal();
}
inline const ::textureData_proto& modelData_proto::_internal_text_normal() const {
  const ::textureData_proto* p = text_normal_;
  return p != nullptr ? *p : reinterpret_cast<const ::textureData_proto&>(
      ::_textureData_proto_default_instance_);
}
inline const ::textureData_proto& modelData_proto::text_normal() const {
  // @@protoc_insertion_point(field_get:modelData_proto.text_normal)
  return _internal_text_normal();
}
inline void modelData_proto::unsafe_arena_set_allocated_text_normal(
    ::textureData_proto* text_normal) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_normal_);
  }
  text_normal_ = text_normal;
  if (text_normal) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:modelData_proto.text_normal)
}
inline ::textureData_proto* modelData_proto::release_text_normal() {
  _has_bits_[0] &= ~0x00000020u;
  ::textureData_proto* temp = text_normal_;
  text_normal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::textureData_proto* modelData_proto::unsafe_arena_release_text_normal() {
  // @@protoc_insertion_point(field_release:modelData_proto.text_normal)
  _has_bits_[0] &= ~0x00000020u;
  ::textureData_proto* temp = text_normal_;
  text_normal_ = nullptr;
  return temp;
}
inline ::textureData_proto* modelData_proto::_internal_mutable_text_normal() {
  _has_bits_[0] |= 0x00000020u;
  if (text_normal_ == nullptr) {
    auto* p = CreateMaybeMessage<::textureData_proto>(GetArenaForAllocation());
    text_normal_ = p;
  }
  return text_normal_;
}
inline ::textureData_proto* modelData_proto::mutable_text_normal() {
  ::textureData_proto* _msg = _internal_mutable_text_normal();
  // @@protoc_insertion_point(field_mutable:modelData_proto.text_normal)
  return _msg;
}
inline void modelData_proto::set_allocated_text_normal(::textureData_proto* text_normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_normal_);
  }
  if (text_normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_normal));
    if (message_arena != submessage_arena) {
      text_normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_normal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  text_normal_ = text_normal;
  // @@protoc_insertion_point(field_set_allocated:modelData_proto.text_normal)
}

// optional .textureData_proto text_rough = 7;
inline bool modelData_proto::_internal_has_text_rough() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || text_rough_ != nullptr);
  return value;
}
inline bool modelData_proto::has_text_rough() const {
  return _internal_has_text_rough();
}
inline const ::textureData_proto& modelData_proto::_internal_text_rough() const {
  const ::textureData_proto* p = text_rough_;
  return p != nullptr ? *p : reinterpret_cast<const ::textureData_proto&>(
      ::_textureData_proto_default_instance_);
}
inline const ::textureData_proto& modelData_proto::text_rough() const {
  // @@protoc_insertion_point(field_get:modelData_proto.text_rough)
  return _internal_text_rough();
}
inline void modelData_proto::unsafe_arena_set_allocated_text_rough(
    ::textureData_proto* text_rough) {
  if (GetArenaForAllocation() == nullptr) {
    delete static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_rough_);
  }
  text_rough_ = text_rough;
  if (text_rough) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:modelData_proto.text_rough)
}
inline ::textureData_proto* modelData_proto::release_text_rough() {
  _has_bits_[0] &= ~0x00000040u;
  ::textureData_proto* temp = text_rough_;
  text_rough_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::textureData_proto* modelData_proto::unsafe_arena_release_text_rough() {
  // @@protoc_insertion_point(field_release:modelData_proto.text_rough)
  _has_bits_[0] &= ~0x00000040u;
  ::textureData_proto* temp = text_rough_;
  text_rough_ = nullptr;
  return temp;
}
inline ::textureData_proto* modelData_proto::_internal_mutable_text_rough() {
  _has_bits_[0] |= 0x00000040u;
  if (text_rough_ == nullptr) {
    auto* p = CreateMaybeMessage<::textureData_proto>(GetArenaForAllocation());
    text_rough_ = p;
  }
  return text_rough_;
}
inline ::textureData_proto* modelData_proto::mutable_text_rough() {
  ::textureData_proto* _msg = _internal_mutable_text_rough();
  // @@protoc_insertion_point(field_mutable:modelData_proto.text_rough)
  return _msg;
}
inline void modelData_proto::set_allocated_text_rough(::textureData_proto* text_rough) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete static_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_rough_);
  }
  if (text_rough) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                static_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_rough));
    if (message_arena != submessage_arena) {
      text_rough = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_rough, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  text_rough_ = text_rough;
  // @@protoc_insertion_point(field_set_allocated:modelData_proto.text_rough)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modelData_2eproto
