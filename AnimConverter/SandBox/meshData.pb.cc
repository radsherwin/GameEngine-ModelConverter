// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meshData.proto

#include "meshData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr meshData_proto::meshData_proto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pname_()
  , mode_()
  , _mode_cached_byte_size_(0)
  , nodenumber_()
  , _nodenumber_cached_byte_size_(0)
  , tricount_()
  , _tricount_cached_byte_size_(0)
  , vertcount_()
  , _vertcount_cached_byte_size_(0)
  , vbo_vert_()
  , vbo_norm_()
  , vbo_uv_()
  , vbo_index_()
  , vbo_color_()
  , text_color_()
  , anim_data_()
  , materialindex_()
  , _materialindex_cached_byte_size_(0)
  , pversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , meshcount_(0u)
  , texcount_(0u)
  , namecount_(0u)
  , animcount_(0u){}
struct meshData_protoDefaultTypeInternal {
  constexpr meshData_protoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~meshData_protoDefaultTypeInternal() {}
  union {
    meshData_proto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT meshData_protoDefaultTypeInternal _meshData_proto_default_instance_;
bool meshData_proto_RENDER_MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> meshData_proto_RENDER_MODE_strings[7] = {};

static const char meshData_proto_RENDER_MODE_names[] =
  "MODE_LINE"
  "MODE_LINE_LOOP"
  "MODE_LINE_STRIP"
  "MODE_POINTS"
  "MODE_TRIANGLES"
  "MODE_TRIANGLE_FAN"
  "MODE_TRIANGLE_STRIP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry meshData_proto_RENDER_MODE_entries[] = {
  { {meshData_proto_RENDER_MODE_names + 0, 9}, 1 },
  { {meshData_proto_RENDER_MODE_names + 9, 14}, 2 },
  { {meshData_proto_RENDER_MODE_names + 23, 15}, 3 },
  { {meshData_proto_RENDER_MODE_names + 38, 11}, 0 },
  { {meshData_proto_RENDER_MODE_names + 49, 14}, 4 },
  { {meshData_proto_RENDER_MODE_names + 63, 17}, 6 },
  { {meshData_proto_RENDER_MODE_names + 80, 19}, 5 },
};

static const int meshData_proto_RENDER_MODE_entries_by_number[] = {
  3, // 0 -> MODE_POINTS
  0, // 1 -> MODE_LINE
  1, // 2 -> MODE_LINE_LOOP
  2, // 3 -> MODE_LINE_STRIP
  4, // 4 -> MODE_TRIANGLES
  6, // 5 -> MODE_TRIANGLE_STRIP
  5, // 6 -> MODE_TRIANGLE_FAN
};

const std::string& meshData_proto_RENDER_MODE_Name(
    meshData_proto_RENDER_MODE value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          meshData_proto_RENDER_MODE_entries,
          meshData_proto_RENDER_MODE_entries_by_number,
          7, meshData_proto_RENDER_MODE_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      meshData_proto_RENDER_MODE_entries,
      meshData_proto_RENDER_MODE_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     meshData_proto_RENDER_MODE_strings[idx].get();
}
bool meshData_proto_RENDER_MODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, meshData_proto_RENDER_MODE* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      meshData_proto_RENDER_MODE_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<meshData_proto_RENDER_MODE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_POINTS;
constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_LINE;
constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_LINE_LOOP;
constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_LINE_STRIP;
constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_TRIANGLES;
constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_TRIANGLE_STRIP;
constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_TRIANGLE_FAN;
constexpr meshData_proto_RENDER_MODE meshData_proto::RENDER_MODE_MIN;
constexpr meshData_proto_RENDER_MODE meshData_proto::RENDER_MODE_MAX;
constexpr int meshData_proto::RENDER_MODE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class meshData_proto::_Internal {
 public:
};

void meshData_proto::clear_vbo_vert() {
  vbo_vert_.Clear();
}
void meshData_proto::clear_vbo_norm() {
  vbo_norm_.Clear();
}
void meshData_proto::clear_vbo_uv() {
  vbo_uv_.Clear();
}
void meshData_proto::clear_vbo_index() {
  vbo_index_.Clear();
}
void meshData_proto::clear_vbo_color() {
  vbo_color_.Clear();
}
void meshData_proto::clear_text_color() {
  text_color_.Clear();
}
void meshData_proto::clear_anim_data() {
  anim_data_.Clear();
}
meshData_proto::meshData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  pname_(arena),
  mode_(arena),
  nodenumber_(arena),
  tricount_(arena),
  vertcount_(arena),
  vbo_vert_(arena),
  vbo_norm_(arena),
  vbo_uv_(arena),
  vbo_index_(arena),
  vbo_color_(arena),
  text_color_(arena),
  anim_data_(arena),
  materialindex_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:meshData_proto)
}
meshData_proto::meshData_proto(const meshData_proto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      pname_(from.pname_),
      mode_(from.mode_),
      nodenumber_(from.nodenumber_),
      tricount_(from.tricount_),
      vertcount_(from.vertcount_),
      vbo_vert_(from.vbo_vert_),
      vbo_norm_(from.vbo_norm_),
      vbo_uv_(from.vbo_uv_),
      vbo_index_(from.vbo_index_),
      vbo_color_(from.vbo_color_),
      text_color_(from.text_color_),
      anim_data_(from.anim_data_),
      materialindex_(from.materialindex_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  pversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pversion().empty()) {
    pversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pversion(), 
      GetArenaForAllocation());
  }
  ::memcpy(&meshcount_, &from.meshcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&animcount_) -
    reinterpret_cast<char*>(&meshcount_)) + sizeof(animcount_));
  // @@protoc_insertion_point(copy_constructor:meshData_proto)
}

inline void meshData_proto::SharedCtor() {
pversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&meshcount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&animcount_) -
    reinterpret_cast<char*>(&meshcount_)) + sizeof(animcount_));
}

meshData_proto::~meshData_proto() {
  // @@protoc_insertion_point(destructor:meshData_proto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void meshData_proto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void meshData_proto::ArenaDtor(void* object) {
  meshData_proto* _this = reinterpret_cast< meshData_proto* >(object);
  (void)_this;
}
void meshData_proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void meshData_proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void meshData_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:meshData_proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pname_.Clear();
  mode_.Clear();
  nodenumber_.Clear();
  tricount_.Clear();
  vertcount_.Clear();
  vbo_vert_.Clear();
  vbo_norm_.Clear();
  vbo_uv_.Clear();
  vbo_index_.Clear();
  vbo_color_.Clear();
  text_color_.Clear();
  anim_data_.Clear();
  materialindex_.Clear();
  pversion_.ClearToEmpty();
  ::memset(&meshcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&animcount_) -
      reinterpret_cast<char*>(&meshcount_)) + sizeof(animcount_));
  _internal_metadata_.Clear<std::string>();
}

const char* meshData_proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes pName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pname();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .meshData_proto.RENDER_MODE mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_mode(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_mode(static_cast<::meshData_proto_RENDER_MODE>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint32 nodeNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_nodenumber(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_nodenumber(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 triCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tricount(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_tricount(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 vertCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vertcount(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_vertcount(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vboData_proto vbo_vert = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vbo_vert(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vboData_proto vbo_norm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vbo_norm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vboData_proto vbo_uv = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vbo_uv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vboData_proto vbo_index = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vbo_index(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vboData_proto vbo_color = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vbo_color(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .textureData_proto text_color = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text_color(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .animData_proto anim_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_anim_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 materialIndex = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_materialindex(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_materialindex(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 meshCount = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          meshcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 texCount = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          texcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nameCount = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          namecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 animCount = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          animcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* meshData_proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:meshData_proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pVersion = 1;
  if (!this->_internal_pversion().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pversion(), target);
  }

  // repeated bytes pName = 2;
  for (int i = 0, n = this->_internal_pname_size(); i < n; i++) {
    const auto& s = this->_internal_pname(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated .meshData_proto.RENDER_MODE mode = 3;
  {
    int byte_size = _mode_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, mode_, byte_size, target);
    }
  }

  // repeated uint32 nodeNumber = 4;
  {
    int byte_size = _nodenumber_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_nodenumber(), byte_size, target);
    }
  }

  // repeated uint32 triCount = 5;
  {
    int byte_size = _tricount_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_tricount(), byte_size, target);
    }
  }

  // repeated uint32 vertCount = 6;
  {
    int byte_size = _vertcount_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_vertcount(), byte_size, target);
    }
  }

  // repeated .vboData_proto vbo_vert = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vbo_vert_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_vbo_vert(i), target, stream);
  }

  // repeated .vboData_proto vbo_norm = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vbo_norm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_vbo_norm(i), target, stream);
  }

  // repeated .vboData_proto vbo_uv = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vbo_uv_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_vbo_uv(i), target, stream);
  }

  // repeated .vboData_proto vbo_index = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vbo_index_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_vbo_index(i), target, stream);
  }

  // repeated .vboData_proto vbo_color = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vbo_color_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_vbo_color(i), target, stream);
  }

  // repeated .textureData_proto text_color = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_color_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_text_color(i), target, stream);
  }

  // repeated .animData_proto anim_data = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_anim_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_anim_data(i), target, stream);
  }

  // repeated uint32 materialIndex = 14;
  {
    int byte_size = _materialindex_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          14, _internal_materialindex(), byte_size, target);
    }
  }

  // uint32 meshCount = 15;
  if (this->_internal_meshcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_meshcount(), target);
  }

  // uint32 texCount = 16;
  if (this->_internal_texcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_texcount(), target);
  }

  // uint32 nameCount = 17;
  if (this->_internal_namecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_namecount(), target);
  }

  // uint32 animCount = 18;
  if (this->_internal_animcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_animcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshData_proto)
  return target;
}

size_t meshData_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:meshData_proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes pName = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pname_.size());
  for (int i = 0, n = pname_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      pname_.Get(i));
  }

  // repeated .meshData_proto.RENDER_MODE mode = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_mode_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_mode(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mode_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 nodeNumber = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->nodenumber_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nodenumber_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 triCount = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tricount_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tricount_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 vertCount = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vertcount_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vertcount_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .vboData_proto vbo_vert = 7;
  total_size += 1UL * this->_internal_vbo_vert_size();
  for (const auto& msg : this->vbo_vert_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vboData_proto vbo_norm = 8;
  total_size += 1UL * this->_internal_vbo_norm_size();
  for (const auto& msg : this->vbo_norm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vboData_proto vbo_uv = 9;
  total_size += 1UL * this->_internal_vbo_uv_size();
  for (const auto& msg : this->vbo_uv_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vboData_proto vbo_index = 10;
  total_size += 1UL * this->_internal_vbo_index_size();
  for (const auto& msg : this->vbo_index_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vboData_proto vbo_color = 11;
  total_size += 1UL * this->_internal_vbo_color_size();
  for (const auto& msg : this->vbo_color_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .textureData_proto text_color = 12;
  total_size += 1UL * this->_internal_text_color_size();
  for (const auto& msg : this->text_color_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .animData_proto anim_data = 13;
  total_size += 1UL * this->_internal_anim_data_size();
  for (const auto& msg : this->anim_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 materialIndex = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->materialindex_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _materialindex_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes pVersion = 1;
  if (!this->_internal_pversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pversion());
  }

  // uint32 meshCount = 15;
  if (this->_internal_meshcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_meshcount());
  }

  // uint32 texCount = 16;
  if (this->_internal_texcount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_texcount());
  }

  // uint32 nameCount = 17;
  if (this->_internal_namecount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_namecount());
  }

  // uint32 animCount = 18;
  if (this->_internal_animcount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_animcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void meshData_proto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const meshData_proto*>(
      &from));
}

void meshData_proto::MergeFrom(const meshData_proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:meshData_proto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pname_.MergeFrom(from.pname_);
  mode_.MergeFrom(from.mode_);
  nodenumber_.MergeFrom(from.nodenumber_);
  tricount_.MergeFrom(from.tricount_);
  vertcount_.MergeFrom(from.vertcount_);
  vbo_vert_.MergeFrom(from.vbo_vert_);
  vbo_norm_.MergeFrom(from.vbo_norm_);
  vbo_uv_.MergeFrom(from.vbo_uv_);
  vbo_index_.MergeFrom(from.vbo_index_);
  vbo_color_.MergeFrom(from.vbo_color_);
  text_color_.MergeFrom(from.text_color_);
  anim_data_.MergeFrom(from.anim_data_);
  materialindex_.MergeFrom(from.materialindex_);
  if (!from._internal_pversion().empty()) {
    _internal_set_pversion(from._internal_pversion());
  }
  if (from._internal_meshcount() != 0) {
    _internal_set_meshcount(from._internal_meshcount());
  }
  if (from._internal_texcount() != 0) {
    _internal_set_texcount(from._internal_texcount());
  }
  if (from._internal_namecount() != 0) {
    _internal_set_namecount(from._internal_namecount());
  }
  if (from._internal_animcount() != 0) {
    _internal_set_animcount(from._internal_animcount());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void meshData_proto::CopyFrom(const meshData_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshData_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool meshData_proto::IsInitialized() const {
  return true;
}

void meshData_proto::InternalSwap(meshData_proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pname_.InternalSwap(&other->pname_);
  mode_.InternalSwap(&other->mode_);
  nodenumber_.InternalSwap(&other->nodenumber_);
  tricount_.InternalSwap(&other->tricount_);
  vertcount_.InternalSwap(&other->vertcount_);
  vbo_vert_.InternalSwap(&other->vbo_vert_);
  vbo_norm_.InternalSwap(&other->vbo_norm_);
  vbo_uv_.InternalSwap(&other->vbo_uv_);
  vbo_index_.InternalSwap(&other->vbo_index_);
  vbo_color_.InternalSwap(&other->vbo_color_);
  text_color_.InternalSwap(&other->text_color_);
  anim_data_.InternalSwap(&other->anim_data_);
  materialindex_.InternalSwap(&other->materialindex_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pversion_, GetArenaForAllocation(),
      &other->pversion_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(meshData_proto, animcount_)
      + sizeof(meshData_proto::animcount_)
      - PROTOBUF_FIELD_OFFSET(meshData_proto, meshcount_)>(
          reinterpret_cast<char*>(&meshcount_),
          reinterpret_cast<char*>(&other->meshcount_));
}

std::string meshData_proto::GetTypeName() const {
  return "meshData_proto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::meshData_proto* Arena::CreateMaybeMessage< ::meshData_proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::meshData_proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
