// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: textureData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_textureData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_textureData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_textureData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_textureData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class textureData_proto;
struct textureData_protoDefaultTypeInternal;
extern textureData_protoDefaultTypeInternal _textureData_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::textureData_proto* Arena::CreateMaybeMessage<::textureData_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum textureData_proto_TEXTURE_EFORMAT : int {
  textureData_proto_TEXTURE_EFORMAT_EFORMAT_BGR = 0,
  textureData_proto_TEXTURE_EFORMAT_EFORMAT_RGB = 1,
  textureData_proto_TEXTURE_EFORMAT_EFORMAT_RGBA = 2,
  textureData_proto_TEXTURE_EFORMAT_textureData_proto_TEXTURE_EFORMAT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  textureData_proto_TEXTURE_EFORMAT_textureData_proto_TEXTURE_EFORMAT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool textureData_proto_TEXTURE_EFORMAT_IsValid(int value);
constexpr textureData_proto_TEXTURE_EFORMAT textureData_proto_TEXTURE_EFORMAT_TEXTURE_EFORMAT_MIN = textureData_proto_TEXTURE_EFORMAT_EFORMAT_BGR;
constexpr textureData_proto_TEXTURE_EFORMAT textureData_proto_TEXTURE_EFORMAT_TEXTURE_EFORMAT_MAX = textureData_proto_TEXTURE_EFORMAT_EFORMAT_RGBA;
constexpr int textureData_proto_TEXTURE_EFORMAT_TEXTURE_EFORMAT_ARRAYSIZE = textureData_proto_TEXTURE_EFORMAT_TEXTURE_EFORMAT_MAX + 1;

const std::string& textureData_proto_TEXTURE_EFORMAT_Name(textureData_proto_TEXTURE_EFORMAT value);
template<typename T>
inline const std::string& textureData_proto_TEXTURE_EFORMAT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, textureData_proto_TEXTURE_EFORMAT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function textureData_proto_TEXTURE_EFORMAT_Name.");
  return textureData_proto_TEXTURE_EFORMAT_Name(static_cast<textureData_proto_TEXTURE_EFORMAT>(enum_t_value));
}
bool textureData_proto_TEXTURE_EFORMAT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, textureData_proto_TEXTURE_EFORMAT* value);
enum textureData_proto_TEXTURE_NCOMPONENT : int {
  textureData_proto_TEXTURE_NCOMPONENT_NCOMPONENT_BGR = 0,
  textureData_proto_TEXTURE_NCOMPONENT_NCOMPONENT_RGB = 1,
  textureData_proto_TEXTURE_NCOMPONENT_NCOMPONENT_RGBA = 2,
  textureData_proto_TEXTURE_NCOMPONENT_textureData_proto_TEXTURE_NCOMPONENT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  textureData_proto_TEXTURE_NCOMPONENT_textureData_proto_TEXTURE_NCOMPONENT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool textureData_proto_TEXTURE_NCOMPONENT_IsValid(int value);
constexpr textureData_proto_TEXTURE_NCOMPONENT textureData_proto_TEXTURE_NCOMPONENT_TEXTURE_NCOMPONENT_MIN = textureData_proto_TEXTURE_NCOMPONENT_NCOMPONENT_BGR;
constexpr textureData_proto_TEXTURE_NCOMPONENT textureData_proto_TEXTURE_NCOMPONENT_TEXTURE_NCOMPONENT_MAX = textureData_proto_TEXTURE_NCOMPONENT_NCOMPONENT_RGBA;
constexpr int textureData_proto_TEXTURE_NCOMPONENT_TEXTURE_NCOMPONENT_ARRAYSIZE = textureData_proto_TEXTURE_NCOMPONENT_TEXTURE_NCOMPONENT_MAX + 1;

const std::string& textureData_proto_TEXTURE_NCOMPONENT_Name(textureData_proto_TEXTURE_NCOMPONENT value);
template<typename T>
inline const std::string& textureData_proto_TEXTURE_NCOMPONENT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, textureData_proto_TEXTURE_NCOMPONENT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function textureData_proto_TEXTURE_NCOMPONENT_Name.");
  return textureData_proto_TEXTURE_NCOMPONENT_Name(static_cast<textureData_proto_TEXTURE_NCOMPONENT>(enum_t_value));
}
bool textureData_proto_TEXTURE_NCOMPONENT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, textureData_proto_TEXTURE_NCOMPONENT* value);
enum textureData_proto_TEXTURE_TYPE : int {
  textureData_proto_TEXTURE_TYPE_JPEG = 0,
  textureData_proto_TEXTURE_TYPE_PNG = 1,
  textureData_proto_TEXTURE_TYPE_BMP = 2,
  textureData_proto_TEXTURE_TYPE_GIF = 3,
  textureData_proto_TEXTURE_TYPE_textureData_proto_TEXTURE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  textureData_proto_TEXTURE_TYPE_textureData_proto_TEXTURE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool textureData_proto_TEXTURE_TYPE_IsValid(int value);
constexpr textureData_proto_TEXTURE_TYPE textureData_proto_TEXTURE_TYPE_TEXTURE_TYPE_MIN = textureData_proto_TEXTURE_TYPE_JPEG;
constexpr textureData_proto_TEXTURE_TYPE textureData_proto_TEXTURE_TYPE_TEXTURE_TYPE_MAX = textureData_proto_TEXTURE_TYPE_GIF;
constexpr int textureData_proto_TEXTURE_TYPE_TEXTURE_TYPE_ARRAYSIZE = textureData_proto_TEXTURE_TYPE_TEXTURE_TYPE_MAX + 1;

const std::string& textureData_proto_TEXTURE_TYPE_Name(textureData_proto_TEXTURE_TYPE value);
template<typename T>
inline const std::string& textureData_proto_TEXTURE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, textureData_proto_TEXTURE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function textureData_proto_TEXTURE_TYPE_Name.");
  return textureData_proto_TEXTURE_TYPE_Name(static_cast<textureData_proto_TEXTURE_TYPE>(enum_t_value));
}
bool textureData_proto_TEXTURE_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, textureData_proto_TEXTURE_TYPE* value);
enum textureData_proto_TEXTURE_MAG_FILTER : int {
  textureData_proto_TEXTURE_MAG_FILTER_MAG_NEAREST = 0,
  textureData_proto_TEXTURE_MAG_FILTER_MAG_LINEAR = 1,
  textureData_proto_TEXTURE_MAG_FILTER_textureData_proto_TEXTURE_MAG_FILTER_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  textureData_proto_TEXTURE_MAG_FILTER_textureData_proto_TEXTURE_MAG_FILTER_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool textureData_proto_TEXTURE_MAG_FILTER_IsValid(int value);
constexpr textureData_proto_TEXTURE_MAG_FILTER textureData_proto_TEXTURE_MAG_FILTER_TEXTURE_MAG_FILTER_MIN = textureData_proto_TEXTURE_MAG_FILTER_MAG_NEAREST;
constexpr textureData_proto_TEXTURE_MAG_FILTER textureData_proto_TEXTURE_MAG_FILTER_TEXTURE_MAG_FILTER_MAX = textureData_proto_TEXTURE_MAG_FILTER_MAG_LINEAR;
constexpr int textureData_proto_TEXTURE_MAG_FILTER_TEXTURE_MAG_FILTER_ARRAYSIZE = textureData_proto_TEXTURE_MAG_FILTER_TEXTURE_MAG_FILTER_MAX + 1;

const std::string& textureData_proto_TEXTURE_MAG_FILTER_Name(textureData_proto_TEXTURE_MAG_FILTER value);
template<typename T>
inline const std::string& textureData_proto_TEXTURE_MAG_FILTER_Name(T enum_t_value) {
  static_assert(::std::is_same<T, textureData_proto_TEXTURE_MAG_FILTER>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function textureData_proto_TEXTURE_MAG_FILTER_Name.");
  return textureData_proto_TEXTURE_MAG_FILTER_Name(static_cast<textureData_proto_TEXTURE_MAG_FILTER>(enum_t_value));
}
bool textureData_proto_TEXTURE_MAG_FILTER_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, textureData_proto_TEXTURE_MAG_FILTER* value);
enum textureData_proto_TEXTURE_MIN_FILTER : int {
  textureData_proto_TEXTURE_MIN_FILTER_MIN_NEAREST = 0,
  textureData_proto_TEXTURE_MIN_FILTER_MIN_LINEAR = 1,
  textureData_proto_TEXTURE_MIN_FILTER_MIN_NEAREST_MIPMAP_NEAREST = 2,
  textureData_proto_TEXTURE_MIN_FILTER_MIN_LINEAR_MIPMAP_NEAREST = 3,
  textureData_proto_TEXTURE_MIN_FILTER_MIN_NEAREST_MIPMAP_LINEAR = 4,
  textureData_proto_TEXTURE_MIN_FILTER_MIN_LINEAR_MIPMAP_LINEAR = 5,
  textureData_proto_TEXTURE_MIN_FILTER_textureData_proto_TEXTURE_MIN_FILTER_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  textureData_proto_TEXTURE_MIN_FILTER_textureData_proto_TEXTURE_MIN_FILTER_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool textureData_proto_TEXTURE_MIN_FILTER_IsValid(int value);
constexpr textureData_proto_TEXTURE_MIN_FILTER textureData_proto_TEXTURE_MIN_FILTER_TEXTURE_MIN_FILTER_MIN = textureData_proto_TEXTURE_MIN_FILTER_MIN_NEAREST;
constexpr textureData_proto_TEXTURE_MIN_FILTER textureData_proto_TEXTURE_MIN_FILTER_TEXTURE_MIN_FILTER_MAX = textureData_proto_TEXTURE_MIN_FILTER_MIN_LINEAR_MIPMAP_LINEAR;
constexpr int textureData_proto_TEXTURE_MIN_FILTER_TEXTURE_MIN_FILTER_ARRAYSIZE = textureData_proto_TEXTURE_MIN_FILTER_TEXTURE_MIN_FILTER_MAX + 1;

const std::string& textureData_proto_TEXTURE_MIN_FILTER_Name(textureData_proto_TEXTURE_MIN_FILTER value);
template<typename T>
inline const std::string& textureData_proto_TEXTURE_MIN_FILTER_Name(T enum_t_value) {
  static_assert(::std::is_same<T, textureData_proto_TEXTURE_MIN_FILTER>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function textureData_proto_TEXTURE_MIN_FILTER_Name.");
  return textureData_proto_TEXTURE_MIN_FILTER_Name(static_cast<textureData_proto_TEXTURE_MIN_FILTER>(enum_t_value));
}
bool textureData_proto_TEXTURE_MIN_FILTER_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, textureData_proto_TEXTURE_MIN_FILTER* value);
enum textureData_proto_TEXTURE_WRAP : int {
  textureData_proto_TEXTURE_WRAP_WRAP_CLAMP_TO_EDGE = 0,
  textureData_proto_TEXTURE_WRAP_WRAP_MIRRORED_REPEAT = 1,
  textureData_proto_TEXTURE_WRAP_WRAP_REPEAT = 2,
  textureData_proto_TEXTURE_WRAP_textureData_proto_TEXTURE_WRAP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  textureData_proto_TEXTURE_WRAP_textureData_proto_TEXTURE_WRAP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool textureData_proto_TEXTURE_WRAP_IsValid(int value);
constexpr textureData_proto_TEXTURE_WRAP textureData_proto_TEXTURE_WRAP_TEXTURE_WRAP_MIN = textureData_proto_TEXTURE_WRAP_WRAP_CLAMP_TO_EDGE;
constexpr textureData_proto_TEXTURE_WRAP textureData_proto_TEXTURE_WRAP_TEXTURE_WRAP_MAX = textureData_proto_TEXTURE_WRAP_WRAP_REPEAT;
constexpr int textureData_proto_TEXTURE_WRAP_TEXTURE_WRAP_ARRAYSIZE = textureData_proto_TEXTURE_WRAP_TEXTURE_WRAP_MAX + 1;

const std::string& textureData_proto_TEXTURE_WRAP_Name(textureData_proto_TEXTURE_WRAP value);
template<typename T>
inline const std::string& textureData_proto_TEXTURE_WRAP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, textureData_proto_TEXTURE_WRAP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function textureData_proto_TEXTURE_WRAP_Name.");
  return textureData_proto_TEXTURE_WRAP_Name(static_cast<textureData_proto_TEXTURE_WRAP>(enum_t_value));
}
bool textureData_proto_TEXTURE_WRAP_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, textureData_proto_TEXTURE_WRAP* value);
enum textureData_proto_TEXTURE_PIXEL_TYPE : int {
  textureData_proto_TEXTURE_PIXEL_TYPE_BYTE = 0,
  textureData_proto_TEXTURE_PIXEL_TYPE_UNSIGNED_BYTE = 1,
  textureData_proto_TEXTURE_PIXEL_TYPE_SHORT = 2,
  textureData_proto_TEXTURE_PIXEL_TYPE_UNSIGNED_SHORT = 3,
  textureData_proto_TEXTURE_PIXEL_TYPE_INT = 4,
  textureData_proto_TEXTURE_PIXEL_TYPE_UNSIGNED_INT = 5,
  textureData_proto_TEXTURE_PIXEL_TYPE_FLOAT = 6,
  textureData_proto_TEXTURE_PIXEL_TYPE_DOUBLE = 7,
  textureData_proto_TEXTURE_PIXEL_TYPE_textureData_proto_TEXTURE_PIXEL_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  textureData_proto_TEXTURE_PIXEL_TYPE_textureData_proto_TEXTURE_PIXEL_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool textureData_proto_TEXTURE_PIXEL_TYPE_IsValid(int value);
constexpr textureData_proto_TEXTURE_PIXEL_TYPE textureData_proto_TEXTURE_PIXEL_TYPE_TEXTURE_PIXEL_TYPE_MIN = textureData_proto_TEXTURE_PIXEL_TYPE_BYTE;
constexpr textureData_proto_TEXTURE_PIXEL_TYPE textureData_proto_TEXTURE_PIXEL_TYPE_TEXTURE_PIXEL_TYPE_MAX = textureData_proto_TEXTURE_PIXEL_TYPE_DOUBLE;
constexpr int textureData_proto_TEXTURE_PIXEL_TYPE_TEXTURE_PIXEL_TYPE_ARRAYSIZE = textureData_proto_TEXTURE_PIXEL_TYPE_TEXTURE_PIXEL_TYPE_MAX + 1;

const std::string& textureData_proto_TEXTURE_PIXEL_TYPE_Name(textureData_proto_TEXTURE_PIXEL_TYPE value);
template<typename T>
inline const std::string& textureData_proto_TEXTURE_PIXEL_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, textureData_proto_TEXTURE_PIXEL_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function textureData_proto_TEXTURE_PIXEL_TYPE_Name.");
  return textureData_proto_TEXTURE_PIXEL_TYPE_Name(static_cast<textureData_proto_TEXTURE_PIXEL_TYPE>(enum_t_value));
}
bool textureData_proto_TEXTURE_PIXEL_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, textureData_proto_TEXTURE_PIXEL_TYPE* value);
// ===================================================================

class textureData_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:textureData_proto) */ {
 public:
  inline textureData_proto() : textureData_proto(nullptr) {}
  ~textureData_proto() override;
  explicit constexpr textureData_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  textureData_proto(const textureData_proto& from);
  textureData_proto(textureData_proto&& from) noexcept
    : textureData_proto() {
    *this = ::std::move(from);
  }

  inline textureData_proto& operator=(const textureData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline textureData_proto& operator=(textureData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const textureData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const textureData_proto* internal_default_instance() {
    return reinterpret_cast<const textureData_proto*>(
               &_textureData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(textureData_proto& a, textureData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(textureData_proto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(textureData_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline textureData_proto* New() const final {
    return new textureData_proto();
  }

  textureData_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<textureData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const textureData_proto& from);
  void MergeFrom(const textureData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(textureData_proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "textureData_proto";
  }
  protected:
  explicit textureData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef textureData_proto_TEXTURE_EFORMAT TEXTURE_EFORMAT;
  static constexpr TEXTURE_EFORMAT EFORMAT_BGR =
    textureData_proto_TEXTURE_EFORMAT_EFORMAT_BGR;
  static constexpr TEXTURE_EFORMAT EFORMAT_RGB =
    textureData_proto_TEXTURE_EFORMAT_EFORMAT_RGB;
  static constexpr TEXTURE_EFORMAT EFORMAT_RGBA =
    textureData_proto_TEXTURE_EFORMAT_EFORMAT_RGBA;
  static inline bool TEXTURE_EFORMAT_IsValid(int value) {
    return textureData_proto_TEXTURE_EFORMAT_IsValid(value);
  }
  static constexpr TEXTURE_EFORMAT TEXTURE_EFORMAT_MIN =
    textureData_proto_TEXTURE_EFORMAT_TEXTURE_EFORMAT_MIN;
  static constexpr TEXTURE_EFORMAT TEXTURE_EFORMAT_MAX =
    textureData_proto_TEXTURE_EFORMAT_TEXTURE_EFORMAT_MAX;
  static constexpr int TEXTURE_EFORMAT_ARRAYSIZE =
    textureData_proto_TEXTURE_EFORMAT_TEXTURE_EFORMAT_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TEXTURE_EFORMAT_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TEXTURE_EFORMAT>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TEXTURE_EFORMAT_Name.");
    return textureData_proto_TEXTURE_EFORMAT_Name(enum_t_value);
  }
  static inline bool TEXTURE_EFORMAT_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TEXTURE_EFORMAT* value) {
    return textureData_proto_TEXTURE_EFORMAT_Parse(name, value);
  }

  typedef textureData_proto_TEXTURE_NCOMPONENT TEXTURE_NCOMPONENT;
  static constexpr TEXTURE_NCOMPONENT NCOMPONENT_BGR =
    textureData_proto_TEXTURE_NCOMPONENT_NCOMPONENT_BGR;
  static constexpr TEXTURE_NCOMPONENT NCOMPONENT_RGB =
    textureData_proto_TEXTURE_NCOMPONENT_NCOMPONENT_RGB;
  static constexpr TEXTURE_NCOMPONENT NCOMPONENT_RGBA =
    textureData_proto_TEXTURE_NCOMPONENT_NCOMPONENT_RGBA;
  static inline bool TEXTURE_NCOMPONENT_IsValid(int value) {
    return textureData_proto_TEXTURE_NCOMPONENT_IsValid(value);
  }
  static constexpr TEXTURE_NCOMPONENT TEXTURE_NCOMPONENT_MIN =
    textureData_proto_TEXTURE_NCOMPONENT_TEXTURE_NCOMPONENT_MIN;
  static constexpr TEXTURE_NCOMPONENT TEXTURE_NCOMPONENT_MAX =
    textureData_proto_TEXTURE_NCOMPONENT_TEXTURE_NCOMPONENT_MAX;
  static constexpr int TEXTURE_NCOMPONENT_ARRAYSIZE =
    textureData_proto_TEXTURE_NCOMPONENT_TEXTURE_NCOMPONENT_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TEXTURE_NCOMPONENT_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TEXTURE_NCOMPONENT>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TEXTURE_NCOMPONENT_Name.");
    return textureData_proto_TEXTURE_NCOMPONENT_Name(enum_t_value);
  }
  static inline bool TEXTURE_NCOMPONENT_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TEXTURE_NCOMPONENT* value) {
    return textureData_proto_TEXTURE_NCOMPONENT_Parse(name, value);
  }

  typedef textureData_proto_TEXTURE_TYPE TEXTURE_TYPE;
  static constexpr TEXTURE_TYPE JPEG =
    textureData_proto_TEXTURE_TYPE_JPEG;
  static constexpr TEXTURE_TYPE PNG =
    textureData_proto_TEXTURE_TYPE_PNG;
  static constexpr TEXTURE_TYPE BMP =
    textureData_proto_TEXTURE_TYPE_BMP;
  static constexpr TEXTURE_TYPE GIF =
    textureData_proto_TEXTURE_TYPE_GIF;
  static inline bool TEXTURE_TYPE_IsValid(int value) {
    return textureData_proto_TEXTURE_TYPE_IsValid(value);
  }
  static constexpr TEXTURE_TYPE TEXTURE_TYPE_MIN =
    textureData_proto_TEXTURE_TYPE_TEXTURE_TYPE_MIN;
  static constexpr TEXTURE_TYPE TEXTURE_TYPE_MAX =
    textureData_proto_TEXTURE_TYPE_TEXTURE_TYPE_MAX;
  static constexpr int TEXTURE_TYPE_ARRAYSIZE =
    textureData_proto_TEXTURE_TYPE_TEXTURE_TYPE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TEXTURE_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TEXTURE_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TEXTURE_TYPE_Name.");
    return textureData_proto_TEXTURE_TYPE_Name(enum_t_value);
  }
  static inline bool TEXTURE_TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TEXTURE_TYPE* value) {
    return textureData_proto_TEXTURE_TYPE_Parse(name, value);
  }

  typedef textureData_proto_TEXTURE_MAG_FILTER TEXTURE_MAG_FILTER;
  static constexpr TEXTURE_MAG_FILTER MAG_NEAREST =
    textureData_proto_TEXTURE_MAG_FILTER_MAG_NEAREST;
  static constexpr TEXTURE_MAG_FILTER MAG_LINEAR =
    textureData_proto_TEXTURE_MAG_FILTER_MAG_LINEAR;
  static inline bool TEXTURE_MAG_FILTER_IsValid(int value) {
    return textureData_proto_TEXTURE_MAG_FILTER_IsValid(value);
  }
  static constexpr TEXTURE_MAG_FILTER TEXTURE_MAG_FILTER_MIN =
    textureData_proto_TEXTURE_MAG_FILTER_TEXTURE_MAG_FILTER_MIN;
  static constexpr TEXTURE_MAG_FILTER TEXTURE_MAG_FILTER_MAX =
    textureData_proto_TEXTURE_MAG_FILTER_TEXTURE_MAG_FILTER_MAX;
  static constexpr int TEXTURE_MAG_FILTER_ARRAYSIZE =
    textureData_proto_TEXTURE_MAG_FILTER_TEXTURE_MAG_FILTER_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TEXTURE_MAG_FILTER_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TEXTURE_MAG_FILTER>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TEXTURE_MAG_FILTER_Name.");
    return textureData_proto_TEXTURE_MAG_FILTER_Name(enum_t_value);
  }
  static inline bool TEXTURE_MAG_FILTER_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TEXTURE_MAG_FILTER* value) {
    return textureData_proto_TEXTURE_MAG_FILTER_Parse(name, value);
  }

  typedef textureData_proto_TEXTURE_MIN_FILTER TEXTURE_MIN_FILTER;
  static constexpr TEXTURE_MIN_FILTER MIN_NEAREST =
    textureData_proto_TEXTURE_MIN_FILTER_MIN_NEAREST;
  static constexpr TEXTURE_MIN_FILTER MIN_LINEAR =
    textureData_proto_TEXTURE_MIN_FILTER_MIN_LINEAR;
  static constexpr TEXTURE_MIN_FILTER MIN_NEAREST_MIPMAP_NEAREST =
    textureData_proto_TEXTURE_MIN_FILTER_MIN_NEAREST_MIPMAP_NEAREST;
  static constexpr TEXTURE_MIN_FILTER MIN_LINEAR_MIPMAP_NEAREST =
    textureData_proto_TEXTURE_MIN_FILTER_MIN_LINEAR_MIPMAP_NEAREST;
  static constexpr TEXTURE_MIN_FILTER MIN_NEAREST_MIPMAP_LINEAR =
    textureData_proto_TEXTURE_MIN_FILTER_MIN_NEAREST_MIPMAP_LINEAR;
  static constexpr TEXTURE_MIN_FILTER MIN_LINEAR_MIPMAP_LINEAR =
    textureData_proto_TEXTURE_MIN_FILTER_MIN_LINEAR_MIPMAP_LINEAR;
  static inline bool TEXTURE_MIN_FILTER_IsValid(int value) {
    return textureData_proto_TEXTURE_MIN_FILTER_IsValid(value);
  }
  static constexpr TEXTURE_MIN_FILTER TEXTURE_MIN_FILTER_MIN =
    textureData_proto_TEXTURE_MIN_FILTER_TEXTURE_MIN_FILTER_MIN;
  static constexpr TEXTURE_MIN_FILTER TEXTURE_MIN_FILTER_MAX =
    textureData_proto_TEXTURE_MIN_FILTER_TEXTURE_MIN_FILTER_MAX;
  static constexpr int TEXTURE_MIN_FILTER_ARRAYSIZE =
    textureData_proto_TEXTURE_MIN_FILTER_TEXTURE_MIN_FILTER_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TEXTURE_MIN_FILTER_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TEXTURE_MIN_FILTER>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TEXTURE_MIN_FILTER_Name.");
    return textureData_proto_TEXTURE_MIN_FILTER_Name(enum_t_value);
  }
  static inline bool TEXTURE_MIN_FILTER_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TEXTURE_MIN_FILTER* value) {
    return textureData_proto_TEXTURE_MIN_FILTER_Parse(name, value);
  }

  typedef textureData_proto_TEXTURE_WRAP TEXTURE_WRAP;
  static constexpr TEXTURE_WRAP WRAP_CLAMP_TO_EDGE =
    textureData_proto_TEXTURE_WRAP_WRAP_CLAMP_TO_EDGE;
  static constexpr TEXTURE_WRAP WRAP_MIRRORED_REPEAT =
    textureData_proto_TEXTURE_WRAP_WRAP_MIRRORED_REPEAT;
  static constexpr TEXTURE_WRAP WRAP_REPEAT =
    textureData_proto_TEXTURE_WRAP_WRAP_REPEAT;
  static inline bool TEXTURE_WRAP_IsValid(int value) {
    return textureData_proto_TEXTURE_WRAP_IsValid(value);
  }
  static constexpr TEXTURE_WRAP TEXTURE_WRAP_MIN =
    textureData_proto_TEXTURE_WRAP_TEXTURE_WRAP_MIN;
  static constexpr TEXTURE_WRAP TEXTURE_WRAP_MAX =
    textureData_proto_TEXTURE_WRAP_TEXTURE_WRAP_MAX;
  static constexpr int TEXTURE_WRAP_ARRAYSIZE =
    textureData_proto_TEXTURE_WRAP_TEXTURE_WRAP_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TEXTURE_WRAP_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TEXTURE_WRAP>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TEXTURE_WRAP_Name.");
    return textureData_proto_TEXTURE_WRAP_Name(enum_t_value);
  }
  static inline bool TEXTURE_WRAP_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TEXTURE_WRAP* value) {
    return textureData_proto_TEXTURE_WRAP_Parse(name, value);
  }

  typedef textureData_proto_TEXTURE_PIXEL_TYPE TEXTURE_PIXEL_TYPE;
  static constexpr TEXTURE_PIXEL_TYPE BYTE =
    textureData_proto_TEXTURE_PIXEL_TYPE_BYTE;
  static constexpr TEXTURE_PIXEL_TYPE UNSIGNED_BYTE =
    textureData_proto_TEXTURE_PIXEL_TYPE_UNSIGNED_BYTE;
  static constexpr TEXTURE_PIXEL_TYPE SHORT =
    textureData_proto_TEXTURE_PIXEL_TYPE_SHORT;
  static constexpr TEXTURE_PIXEL_TYPE UNSIGNED_SHORT =
    textureData_proto_TEXTURE_PIXEL_TYPE_UNSIGNED_SHORT;
  static constexpr TEXTURE_PIXEL_TYPE INT =
    textureData_proto_TEXTURE_PIXEL_TYPE_INT;
  static constexpr TEXTURE_PIXEL_TYPE UNSIGNED_INT =
    textureData_proto_TEXTURE_PIXEL_TYPE_UNSIGNED_INT;
  static constexpr TEXTURE_PIXEL_TYPE FLOAT =
    textureData_proto_TEXTURE_PIXEL_TYPE_FLOAT;
  static constexpr TEXTURE_PIXEL_TYPE DOUBLE =
    textureData_proto_TEXTURE_PIXEL_TYPE_DOUBLE;
  static inline bool TEXTURE_PIXEL_TYPE_IsValid(int value) {
    return textureData_proto_TEXTURE_PIXEL_TYPE_IsValid(value);
  }
  static constexpr TEXTURE_PIXEL_TYPE TEXTURE_PIXEL_TYPE_MIN =
    textureData_proto_TEXTURE_PIXEL_TYPE_TEXTURE_PIXEL_TYPE_MIN;
  static constexpr TEXTURE_PIXEL_TYPE TEXTURE_PIXEL_TYPE_MAX =
    textureData_proto_TEXTURE_PIXEL_TYPE_TEXTURE_PIXEL_TYPE_MAX;
  static constexpr int TEXTURE_PIXEL_TYPE_ARRAYSIZE =
    textureData_proto_TEXTURE_PIXEL_TYPE_TEXTURE_PIXEL_TYPE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TEXTURE_PIXEL_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TEXTURE_PIXEL_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TEXTURE_PIXEL_TYPE_Name.");
    return textureData_proto_TEXTURE_PIXEL_TYPE_Name(enum_t_value);
  }
  static inline bool TEXTURE_PIXEL_TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TEXTURE_PIXEL_TYPE* value) {
    return textureData_proto_TEXTURE_PIXEL_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameDataFieldNumber = 16,
    kPoDataFieldNumber = 19,
    kEnabledFieldNumber = 1,
    kTextTypeFieldNumber = 2,
    kMagFilterFieldNumber = 3,
    kMinFilterFieldNumber = 4,
    kWrapSFieldNumber = 5,
    kWrapTFieldNumber = 6,
    kPixelTypeFieldNumber = 7,
    kEFormatFieldNumber = 8,
    kNComponentFieldNumber = 9,
    kWidthFieldNumber = 10,
    kHeightFieldNumber = 11,
    kComponentFieldNumber = 12,
    kBitsFieldNumber = 13,
    kAsIsFieldNumber = 14,
    kFileNameSizeFieldNumber = 15,
    kDataSizeFieldNumber = 17,
    kHashFieldNumber = 18,
  };
  // bytes fileNameData = 16;
  void clear_filenamedata();
  const std::string& filenamedata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filenamedata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filenamedata();
  PROTOBUF_MUST_USE_RESULT std::string* release_filenamedata();
  void set_allocated_filenamedata(std::string* filenamedata);
  private:
  const std::string& _internal_filenamedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filenamedata(const std::string& value);
  std::string* _internal_mutable_filenamedata();
  public:

  // bytes poData = 19;
  void clear_podata();
  const std::string& podata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_podata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_podata();
  PROTOBUF_MUST_USE_RESULT std::string* release_podata();
  void set_allocated_podata(std::string* podata);
  private:
  const std::string& _internal_podata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_podata(const std::string& value);
  std::string* _internal_mutable_podata();
  public:

  // uint32 enabled = 1;
  void clear_enabled();
  ::PROTOBUF_NAMESPACE_ID::uint32 enabled() const;
  void set_enabled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_enabled() const;
  void _internal_set_enabled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .textureData_proto.TEXTURE_TYPE textType = 2;
  void clear_texttype();
  ::textureData_proto_TEXTURE_TYPE texttype() const;
  void set_texttype(::textureData_proto_TEXTURE_TYPE value);
  private:
  ::textureData_proto_TEXTURE_TYPE _internal_texttype() const;
  void _internal_set_texttype(::textureData_proto_TEXTURE_TYPE value);
  public:

  // .textureData_proto.TEXTURE_MAG_FILTER magFilter = 3;
  void clear_magfilter();
  ::textureData_proto_TEXTURE_MAG_FILTER magfilter() const;
  void set_magfilter(::textureData_proto_TEXTURE_MAG_FILTER value);
  private:
  ::textureData_proto_TEXTURE_MAG_FILTER _internal_magfilter() const;
  void _internal_set_magfilter(::textureData_proto_TEXTURE_MAG_FILTER value);
  public:

  // .textureData_proto.TEXTURE_MIN_FILTER minFilter = 4;
  void clear_minfilter();
  ::textureData_proto_TEXTURE_MIN_FILTER minfilter() const;
  void set_minfilter(::textureData_proto_TEXTURE_MIN_FILTER value);
  private:
  ::textureData_proto_TEXTURE_MIN_FILTER _internal_minfilter() const;
  void _internal_set_minfilter(::textureData_proto_TEXTURE_MIN_FILTER value);
  public:

  // .textureData_proto.TEXTURE_WRAP wrapS = 5;
  void clear_wraps();
  ::textureData_proto_TEXTURE_WRAP wraps() const;
  void set_wraps(::textureData_proto_TEXTURE_WRAP value);
  private:
  ::textureData_proto_TEXTURE_WRAP _internal_wraps() const;
  void _internal_set_wraps(::textureData_proto_TEXTURE_WRAP value);
  public:

  // .textureData_proto.TEXTURE_WRAP wrapT = 6;
  void clear_wrapt();
  ::textureData_proto_TEXTURE_WRAP wrapt() const;
  void set_wrapt(::textureData_proto_TEXTURE_WRAP value);
  private:
  ::textureData_proto_TEXTURE_WRAP _internal_wrapt() const;
  void _internal_set_wrapt(::textureData_proto_TEXTURE_WRAP value);
  public:

  // .textureData_proto.TEXTURE_PIXEL_TYPE pixel_type = 7;
  void clear_pixel_type();
  ::textureData_proto_TEXTURE_PIXEL_TYPE pixel_type() const;
  void set_pixel_type(::textureData_proto_TEXTURE_PIXEL_TYPE value);
  private:
  ::textureData_proto_TEXTURE_PIXEL_TYPE _internal_pixel_type() const;
  void _internal_set_pixel_type(::textureData_proto_TEXTURE_PIXEL_TYPE value);
  public:

  // .textureData_proto.TEXTURE_EFORMAT eFormat = 8;
  void clear_eformat();
  ::textureData_proto_TEXTURE_EFORMAT eformat() const;
  void set_eformat(::textureData_proto_TEXTURE_EFORMAT value);
  private:
  ::textureData_proto_TEXTURE_EFORMAT _internal_eformat() const;
  void _internal_set_eformat(::textureData_proto_TEXTURE_EFORMAT value);
  public:

  // .textureData_proto.TEXTURE_NCOMPONENT nComponent = 9;
  void clear_ncomponent();
  ::textureData_proto_TEXTURE_NCOMPONENT ncomponent() const;
  void set_ncomponent(::textureData_proto_TEXTURE_NCOMPONENT value);
  private:
  ::textureData_proto_TEXTURE_NCOMPONENT _internal_ncomponent() const;
  void _internal_set_ncomponent(::textureData_proto_TEXTURE_NCOMPONENT value);
  public:

  // uint32 width = 10;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 11;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 component = 12;
  void clear_component();
  ::PROTOBUF_NAMESPACE_ID::uint32 component() const;
  void set_component(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_component() const;
  void _internal_set_component(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bits = 13;
  void clear_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 bits() const;
  void set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bits() const;
  void _internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 as_is = 14;
  void clear_as_is();
  ::PROTOBUF_NAMESPACE_ID::uint32 as_is() const;
  void set_as_is(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as_is() const;
  void _internal_set_as_is(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fileNameSize = 15;
  void clear_filenamesize();
  ::PROTOBUF_NAMESPACE_ID::uint32 filenamesize() const;
  void set_filenamesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filenamesize() const;
  void _internal_set_filenamesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dataSize = 17;
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datasize() const;
  void _internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hash = 18;
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:textureData_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filenamedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr podata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 enabled_;
  int texttype_;
  int magfilter_;
  int minfilter_;
  int wraps_;
  int wrapt_;
  int pixel_type_;
  int eformat_;
  int ncomponent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 component_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 as_is_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filenamesize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datasize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_textureData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// textureData_proto

// uint32 enabled = 1;
inline void textureData_proto::clear_enabled() {
  enabled_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::_internal_enabled() const {
  return enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::enabled() const {
  // @@protoc_insertion_point(field_get:textureData_proto.enabled)
  return _internal_enabled();
}
inline void textureData_proto::_internal_set_enabled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  enabled_ = value;
}
inline void textureData_proto::set_enabled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:textureData_proto.enabled)
}

// .textureData_proto.TEXTURE_TYPE textType = 2;
inline void textureData_proto::clear_texttype() {
  texttype_ = 0;
}
inline ::textureData_proto_TEXTURE_TYPE textureData_proto::_internal_texttype() const {
  return static_cast< ::textureData_proto_TEXTURE_TYPE >(texttype_);
}
inline ::textureData_proto_TEXTURE_TYPE textureData_proto::texttype() const {
  // @@protoc_insertion_point(field_get:textureData_proto.textType)
  return _internal_texttype();
}
inline void textureData_proto::_internal_set_texttype(::textureData_proto_TEXTURE_TYPE value) {
  
  texttype_ = value;
}
inline void textureData_proto::set_texttype(::textureData_proto_TEXTURE_TYPE value) {
  _internal_set_texttype(value);
  // @@protoc_insertion_point(field_set:textureData_proto.textType)
}

// .textureData_proto.TEXTURE_MAG_FILTER magFilter = 3;
inline void textureData_proto::clear_magfilter() {
  magfilter_ = 0;
}
inline ::textureData_proto_TEXTURE_MAG_FILTER textureData_proto::_internal_magfilter() const {
  return static_cast< ::textureData_proto_TEXTURE_MAG_FILTER >(magfilter_);
}
inline ::textureData_proto_TEXTURE_MAG_FILTER textureData_proto::magfilter() const {
  // @@protoc_insertion_point(field_get:textureData_proto.magFilter)
  return _internal_magfilter();
}
inline void textureData_proto::_internal_set_magfilter(::textureData_proto_TEXTURE_MAG_FILTER value) {
  
  magfilter_ = value;
}
inline void textureData_proto::set_magfilter(::textureData_proto_TEXTURE_MAG_FILTER value) {
  _internal_set_magfilter(value);
  // @@protoc_insertion_point(field_set:textureData_proto.magFilter)
}

// .textureData_proto.TEXTURE_MIN_FILTER minFilter = 4;
inline void textureData_proto::clear_minfilter() {
  minfilter_ = 0;
}
inline ::textureData_proto_TEXTURE_MIN_FILTER textureData_proto::_internal_minfilter() const {
  return static_cast< ::textureData_proto_TEXTURE_MIN_FILTER >(minfilter_);
}
inline ::textureData_proto_TEXTURE_MIN_FILTER textureData_proto::minfilter() const {
  // @@protoc_insertion_point(field_get:textureData_proto.minFilter)
  return _internal_minfilter();
}
inline void textureData_proto::_internal_set_minfilter(::textureData_proto_TEXTURE_MIN_FILTER value) {
  
  minfilter_ = value;
}
inline void textureData_proto::set_minfilter(::textureData_proto_TEXTURE_MIN_FILTER value) {
  _internal_set_minfilter(value);
  // @@protoc_insertion_point(field_set:textureData_proto.minFilter)
}

// .textureData_proto.TEXTURE_WRAP wrapS = 5;
inline void textureData_proto::clear_wraps() {
  wraps_ = 0;
}
inline ::textureData_proto_TEXTURE_WRAP textureData_proto::_internal_wraps() const {
  return static_cast< ::textureData_proto_TEXTURE_WRAP >(wraps_);
}
inline ::textureData_proto_TEXTURE_WRAP textureData_proto::wraps() const {
  // @@protoc_insertion_point(field_get:textureData_proto.wrapS)
  return _internal_wraps();
}
inline void textureData_proto::_internal_set_wraps(::textureData_proto_TEXTURE_WRAP value) {
  
  wraps_ = value;
}
inline void textureData_proto::set_wraps(::textureData_proto_TEXTURE_WRAP value) {
  _internal_set_wraps(value);
  // @@protoc_insertion_point(field_set:textureData_proto.wrapS)
}

// .textureData_proto.TEXTURE_WRAP wrapT = 6;
inline void textureData_proto::clear_wrapt() {
  wrapt_ = 0;
}
inline ::textureData_proto_TEXTURE_WRAP textureData_proto::_internal_wrapt() const {
  return static_cast< ::textureData_proto_TEXTURE_WRAP >(wrapt_);
}
inline ::textureData_proto_TEXTURE_WRAP textureData_proto::wrapt() const {
  // @@protoc_insertion_point(field_get:textureData_proto.wrapT)
  return _internal_wrapt();
}
inline void textureData_proto::_internal_set_wrapt(::textureData_proto_TEXTURE_WRAP value) {
  
  wrapt_ = value;
}
inline void textureData_proto::set_wrapt(::textureData_proto_TEXTURE_WRAP value) {
  _internal_set_wrapt(value);
  // @@protoc_insertion_point(field_set:textureData_proto.wrapT)
}

// .textureData_proto.TEXTURE_PIXEL_TYPE pixel_type = 7;
inline void textureData_proto::clear_pixel_type() {
  pixel_type_ = 0;
}
inline ::textureData_proto_TEXTURE_PIXEL_TYPE textureData_proto::_internal_pixel_type() const {
  return static_cast< ::textureData_proto_TEXTURE_PIXEL_TYPE >(pixel_type_);
}
inline ::textureData_proto_TEXTURE_PIXEL_TYPE textureData_proto::pixel_type() const {
  // @@protoc_insertion_point(field_get:textureData_proto.pixel_type)
  return _internal_pixel_type();
}
inline void textureData_proto::_internal_set_pixel_type(::textureData_proto_TEXTURE_PIXEL_TYPE value) {
  
  pixel_type_ = value;
}
inline void textureData_proto::set_pixel_type(::textureData_proto_TEXTURE_PIXEL_TYPE value) {
  _internal_set_pixel_type(value);
  // @@protoc_insertion_point(field_set:textureData_proto.pixel_type)
}

// .textureData_proto.TEXTURE_EFORMAT eFormat = 8;
inline void textureData_proto::clear_eformat() {
  eformat_ = 0;
}
inline ::textureData_proto_TEXTURE_EFORMAT textureData_proto::_internal_eformat() const {
  return static_cast< ::textureData_proto_TEXTURE_EFORMAT >(eformat_);
}
inline ::textureData_proto_TEXTURE_EFORMAT textureData_proto::eformat() const {
  // @@protoc_insertion_point(field_get:textureData_proto.eFormat)
  return _internal_eformat();
}
inline void textureData_proto::_internal_set_eformat(::textureData_proto_TEXTURE_EFORMAT value) {
  
  eformat_ = value;
}
inline void textureData_proto::set_eformat(::textureData_proto_TEXTURE_EFORMAT value) {
  _internal_set_eformat(value);
  // @@protoc_insertion_point(field_set:textureData_proto.eFormat)
}

// .textureData_proto.TEXTURE_NCOMPONENT nComponent = 9;
inline void textureData_proto::clear_ncomponent() {
  ncomponent_ = 0;
}
inline ::textureData_proto_TEXTURE_NCOMPONENT textureData_proto::_internal_ncomponent() const {
  return static_cast< ::textureData_proto_TEXTURE_NCOMPONENT >(ncomponent_);
}
inline ::textureData_proto_TEXTURE_NCOMPONENT textureData_proto::ncomponent() const {
  // @@protoc_insertion_point(field_get:textureData_proto.nComponent)
  return _internal_ncomponent();
}
inline void textureData_proto::_internal_set_ncomponent(::textureData_proto_TEXTURE_NCOMPONENT value) {
  
  ncomponent_ = value;
}
inline void textureData_proto::set_ncomponent(::textureData_proto_TEXTURE_NCOMPONENT value) {
  _internal_set_ncomponent(value);
  // @@protoc_insertion_point(field_set:textureData_proto.nComponent)
}

// uint32 width = 10;
inline void textureData_proto::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::width() const {
  // @@protoc_insertion_point(field_get:textureData_proto.width)
  return _internal_width();
}
inline void textureData_proto::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void textureData_proto::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:textureData_proto.width)
}

// uint32 height = 11;
inline void textureData_proto::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::height() const {
  // @@protoc_insertion_point(field_get:textureData_proto.height)
  return _internal_height();
}
inline void textureData_proto::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void textureData_proto::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:textureData_proto.height)
}

// uint32 component = 12;
inline void textureData_proto::clear_component() {
  component_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::_internal_component() const {
  return component_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::component() const {
  // @@protoc_insertion_point(field_get:textureData_proto.component)
  return _internal_component();
}
inline void textureData_proto::_internal_set_component(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  component_ = value;
}
inline void textureData_proto::set_component(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_component(value);
  // @@protoc_insertion_point(field_set:textureData_proto.component)
}

// uint32 bits = 13;
inline void textureData_proto::clear_bits() {
  bits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::_internal_bits() const {
  return bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::bits() const {
  // @@protoc_insertion_point(field_get:textureData_proto.bits)
  return _internal_bits();
}
inline void textureData_proto::_internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bits_ = value;
}
inline void textureData_proto::set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:textureData_proto.bits)
}

// uint32 as_is = 14;
inline void textureData_proto::clear_as_is() {
  as_is_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::_internal_as_is() const {
  return as_is_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::as_is() const {
  // @@protoc_insertion_point(field_get:textureData_proto.as_is)
  return _internal_as_is();
}
inline void textureData_proto::_internal_set_as_is(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  as_is_ = value;
}
inline void textureData_proto::set_as_is(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_as_is(value);
  // @@protoc_insertion_point(field_set:textureData_proto.as_is)
}

// uint32 fileNameSize = 15;
inline void textureData_proto::clear_filenamesize() {
  filenamesize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::_internal_filenamesize() const {
  return filenamesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::filenamesize() const {
  // @@protoc_insertion_point(field_get:textureData_proto.fileNameSize)
  return _internal_filenamesize();
}
inline void textureData_proto::_internal_set_filenamesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  filenamesize_ = value;
}
inline void textureData_proto::set_filenamesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filenamesize(value);
  // @@protoc_insertion_point(field_set:textureData_proto.fileNameSize)
}

// bytes fileNameData = 16;
inline void textureData_proto::clear_filenamedata() {
  filenamedata_.ClearToEmpty();
}
inline const std::string& textureData_proto::filenamedata() const {
  // @@protoc_insertion_point(field_get:textureData_proto.fileNameData)
  return _internal_filenamedata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void textureData_proto::set_filenamedata(ArgT0&& arg0, ArgT... args) {
 
 filenamedata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:textureData_proto.fileNameData)
}
inline std::string* textureData_proto::mutable_filenamedata() {
  std::string* _s = _internal_mutable_filenamedata();
  // @@protoc_insertion_point(field_mutable:textureData_proto.fileNameData)
  return _s;
}
inline const std::string& textureData_proto::_internal_filenamedata() const {
  return filenamedata_.Get();
}
inline void textureData_proto::_internal_set_filenamedata(const std::string& value) {
  
  filenamedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* textureData_proto::_internal_mutable_filenamedata() {
  
  return filenamedata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* textureData_proto::release_filenamedata() {
  // @@protoc_insertion_point(field_release:textureData_proto.fileNameData)
  return filenamedata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void textureData_proto::set_allocated_filenamedata(std::string* filenamedata) {
  if (filenamedata != nullptr) {
    
  } else {
    
  }
  filenamedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filenamedata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:textureData_proto.fileNameData)
}

// uint32 dataSize = 17;
inline void textureData_proto::clear_datasize() {
  datasize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::_internal_datasize() const {
  return datasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::datasize() const {
  // @@protoc_insertion_point(field_get:textureData_proto.dataSize)
  return _internal_datasize();
}
inline void textureData_proto::_internal_set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  datasize_ = value;
}
inline void textureData_proto::set_datasize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:textureData_proto.dataSize)
}

// uint32 hash = 18;
inline void textureData_proto::clear_hash() {
  hash_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textureData_proto::hash() const {
  // @@protoc_insertion_point(field_get:textureData_proto.hash)
  return _internal_hash();
}
inline void textureData_proto::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hash_ = value;
}
inline void textureData_proto::set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:textureData_proto.hash)
}

// bytes poData = 19;
inline void textureData_proto::clear_podata() {
  podata_.ClearToEmpty();
}
inline const std::string& textureData_proto::podata() const {
  // @@protoc_insertion_point(field_get:textureData_proto.poData)
  return _internal_podata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void textureData_proto::set_podata(ArgT0&& arg0, ArgT... args) {
 
 podata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:textureData_proto.poData)
}
inline std::string* textureData_proto::mutable_podata() {
  std::string* _s = _internal_mutable_podata();
  // @@protoc_insertion_point(field_mutable:textureData_proto.poData)
  return _s;
}
inline const std::string& textureData_proto::_internal_podata() const {
  return podata_.Get();
}
inline void textureData_proto::_internal_set_podata(const std::string& value) {
  
  podata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* textureData_proto::_internal_mutable_podata() {
  
  return podata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* textureData_proto::release_podata() {
  // @@protoc_insertion_point(field_release:textureData_proto.poData)
  return podata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void textureData_proto::set_allocated_podata(std::string* podata) {
  if (podata != nullptr) {
    
  } else {
    
  }
  podata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), podata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:textureData_proto.poData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::textureData_proto_TEXTURE_EFORMAT> : ::std::true_type {};
template <> struct is_proto_enum< ::textureData_proto_TEXTURE_NCOMPONENT> : ::std::true_type {};
template <> struct is_proto_enum< ::textureData_proto_TEXTURE_TYPE> : ::std::true_type {};
template <> struct is_proto_enum< ::textureData_proto_TEXTURE_MAG_FILTER> : ::std::true_type {};
template <> struct is_proto_enum< ::textureData_proto_TEXTURE_MIN_FILTER> : ::std::true_type {};
template <> struct is_proto_enum< ::textureData_proto_TEXTURE_WRAP> : ::std::true_type {};
template <> struct is_proto_enum< ::textureData_proto_TEXTURE_PIXEL_TYPE> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_textureData_2eproto
