// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boneData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_boneData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_boneData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_boneData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_boneData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class boneData_proto;
struct boneData_protoDefaultTypeInternal;
extern boneData_protoDefaultTypeInternal _boneData_proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::boneData_proto* Arena::CreateMaybeMessage<::boneData_proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class boneData_proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:boneData_proto) */ {
 public:
  inline boneData_proto() : boneData_proto(nullptr) {}
  ~boneData_proto() override;
  explicit constexpr boneData_proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  boneData_proto(const boneData_proto& from);
  boneData_proto(boneData_proto&& from) noexcept
    : boneData_proto() {
    *this = ::std::move(from);
  }

  inline boneData_proto& operator=(const boneData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline boneData_proto& operator=(boneData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const boneData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const boneData_proto* internal_default_instance() {
    return reinterpret_cast<const boneData_proto*>(
               &_boneData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(boneData_proto& a, boneData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(boneData_proto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(boneData_proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline boneData_proto* New() const final {
    return new boneData_proto();
  }

  boneData_proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<boneData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const boneData_proto& from);
  void MergeFrom(const boneData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(boneData_proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "boneData_proto";
  }
  protected:
  explicit boneData_proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kRotationFieldNumber = 2,
    kScaleFieldNumber = 3,
  };
  // bytes translation = 1;
  void clear_translation();
  const std::string& translation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_translation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_translation();
  PROTOBUF_MUST_USE_RESULT std::string* release_translation();
  void set_allocated_translation(std::string* translation);
  private:
  const std::string& _internal_translation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_translation(const std::string& value);
  std::string* _internal_mutable_translation();
  public:

  // bytes rotation = 2;
  void clear_rotation();
  const std::string& rotation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rotation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rotation();
  PROTOBUF_MUST_USE_RESULT std::string* release_rotation();
  void set_allocated_rotation(std::string* rotation);
  private:
  const std::string& _internal_rotation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rotation(const std::string& value);
  std::string* _internal_mutable_rotation();
  public:

  // bytes scale = 3;
  void clear_scale();
  const std::string& scale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scale();
  PROTOBUF_MUST_USE_RESULT std::string* release_scale();
  void set_allocated_scale(std::string* scale);
  private:
  const std::string& _internal_scale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scale(const std::string& value);
  std::string* _internal_mutable_scale();
  public:

  // @@protoc_insertion_point(class_scope:boneData_proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr translation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rotation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_boneData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// boneData_proto

// bytes translation = 1;
inline void boneData_proto::clear_translation() {
  translation_.ClearToEmpty();
}
inline const std::string& boneData_proto::translation() const {
  // @@protoc_insertion_point(field_get:boneData_proto.translation)
  return _internal_translation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void boneData_proto::set_translation(ArgT0&& arg0, ArgT... args) {
 
 translation_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:boneData_proto.translation)
}
inline std::string* boneData_proto::mutable_translation() {
  std::string* _s = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:boneData_proto.translation)
  return _s;
}
inline const std::string& boneData_proto::_internal_translation() const {
  return translation_.Get();
}
inline void boneData_proto::_internal_set_translation(const std::string& value) {
  
  translation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* boneData_proto::_internal_mutable_translation() {
  
  return translation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* boneData_proto::release_translation() {
  // @@protoc_insertion_point(field_release:boneData_proto.translation)
  return translation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void boneData_proto::set_allocated_translation(std::string* translation) {
  if (translation != nullptr) {
    
  } else {
    
  }
  translation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), translation,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:boneData_proto.translation)
}

// bytes rotation = 2;
inline void boneData_proto::clear_rotation() {
  rotation_.ClearToEmpty();
}
inline const std::string& boneData_proto::rotation() const {
  // @@protoc_insertion_point(field_get:boneData_proto.rotation)
  return _internal_rotation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void boneData_proto::set_rotation(ArgT0&& arg0, ArgT... args) {
 
 rotation_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:boneData_proto.rotation)
}
inline std::string* boneData_proto::mutable_rotation() {
  std::string* _s = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:boneData_proto.rotation)
  return _s;
}
inline const std::string& boneData_proto::_internal_rotation() const {
  return rotation_.Get();
}
inline void boneData_proto::_internal_set_rotation(const std::string& value) {
  
  rotation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* boneData_proto::_internal_mutable_rotation() {
  
  return rotation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* boneData_proto::release_rotation() {
  // @@protoc_insertion_point(field_release:boneData_proto.rotation)
  return rotation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void boneData_proto::set_allocated_rotation(std::string* rotation) {
  if (rotation != nullptr) {
    
  } else {
    
  }
  rotation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rotation,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:boneData_proto.rotation)
}

// bytes scale = 3;
inline void boneData_proto::clear_scale() {
  scale_.ClearToEmpty();
}
inline const std::string& boneData_proto::scale() const {
  // @@protoc_insertion_point(field_get:boneData_proto.scale)
  return _internal_scale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void boneData_proto::set_scale(ArgT0&& arg0, ArgT... args) {
 
 scale_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:boneData_proto.scale)
}
inline std::string* boneData_proto::mutable_scale() {
  std::string* _s = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:boneData_proto.scale)
  return _s;
}
inline const std::string& boneData_proto::_internal_scale() const {
  return scale_.Get();
}
inline void boneData_proto::_internal_set_scale(const std::string& value) {
  
  scale_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* boneData_proto::_internal_mutable_scale() {
  
  return scale_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* boneData_proto::release_scale() {
  // @@protoc_insertion_point(field_release:boneData_proto.scale)
  return scale_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void boneData_proto::set_allocated_scale(std::string* scale) {
  if (scale != nullptr) {
    
  } else {
    
  }
  scale_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scale,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:boneData_proto.scale)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_boneData_2eproto
